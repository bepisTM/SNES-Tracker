Refactor Todo
-------------
006 Make Tab_Collection class
005 automatic tab "active" thing..
004 Careful, alot of mem_tab references are still referring to main_window
003 Keyboard Shortcuts Modular per GUI interface
  \-> This could be modular per Experience
002 Remove SDL implementation from BRR class
001 Remove all references to GrandMode
--- Removing Midi class reference
---- I would like to register a callback function with Midi events received ..
----- this function can be registered when in the Instrument Tab and removed upon exit

New Numbered TODO List
----------------------
016 [Mem_Tab] BRR sample detection seems to be broken (right click over memory area BRR)
015 SNES Tracker window icon / OSX Dock icon / "/usr/share" icons etc.
  usually these icons must be in a set of various dimensions
014 BRR class does not seem appropriately designed
  and I'm not sure how to appropriately design it / other classes.. My main concern is not to
  embed other class objects/method calls unless explicitly required..
  An example would be the BRR::play_sample(Instrument_Window *instr_window) <--> this should not
  require a handle on the instrument window!!!! WTF -- That is a strange-ass dependency for a BRR class
013 Update how-to-install docs
  for linux: alsa-lib is likely called libasound2-dev
  libboost-dev is likely the package name that will work (but won't provide -mt libs!)
  libsdl2-dev

012 Add ability to compile either dynamic or statically
There is a specific concern of making sure Windows builds are distributed avoiding "DLL hell" - eg do not want
to ship to a system and see something like "MFC34.dll is not found!"

There are a variety of nuances to what the level of static and dynamic linking we could incorporate. eg:
"app-level libraries"
  . SDL, boost, etc.
"system-level libraries"
  . libc etc.

So, should allow each level to be customized as dynamic or static. How do other autotools package specify
static/dynamic results?

Anyways, I'm rather content with building everything dynamically for now -- especially since everything is
stable for me and I'm one of the only developers. It's more a long-term concern so that people have an option
to compile statically if they so desire ..

011 OK Response to ElHuesudoII
Apr 01 23:59:50 <ElHuesudoII>	does it have in-tracker brr conversion
.. the tracker has not yet been fully designed -- I would not be surprised if the answer is 'yes'
The answer would only be 'no' if I find a very good reason for the conversion to be done outside of the tracker.
Apr 02 00:00:18 <ElHuesudoII>	does the tracker track the track size
 IT MOST DEFINITELY WILL. SNES Tracker Debugger can already keep track of all read/write/executions made
 during a song's execution.. But the tracker will have a more precise report, for example of:
 . engine size
 . sample / instrument
 . pattern data
 . echo region
 . (other things not yet considered)

010 LibjdkMidi -- additionaly output a DLL than just a static lib
00F "focus click" to NOT act as a real app window click -- "understand" when a click is a focus click so I can at times avoid it
[17:24]  <Clefable> You could listen for focus events, and check on every app window click whether there wasn't a focus click less than 20 ms ago

00E OSX - SDL mercurial "tip" needed for "focus click" functionality that is 
identical to Windows/Linux -- using the new SDL_SetHint(SDL_HINT_MAC_MOUSE_FOCUS_CLICKTHROUGH, "1");
00D Speed up build process (less objects??)
00C automate the compilation of libjkdmidi
00B put STD in a better location
00A detect (linux) gtk+-2.0 or gtk+-3.0 (add configure script)
009 QT NFD implementation and conditional compile specification
--
008 Grey out File->Export items until SPC is loaded (avoid crash)
007 Backquote momentary keyboard shortcut to temporarily speed up emulation (at least 4x)
006 need gfx assets!!
005 OK Occasional Use after free bug when shutting down the program :X not sure how-to trigger
004 Export SPC current state
003 should start documenting keyboard shortcuts for different tabs / global etc.
002 Switch between tabs should be possible via a keyboard shortcut (did I forget it)
001 "G" keypress at memory view should allow user to input a hex address to focus the
hexdump over


Context Menu / Expanding Menu
-----------------------------
Draw the menu on a different SDL Surface, and then blit -- this is to avoid
crap happening when we draw on stuff below us .. hehehe

BRR Sample Watcher
------------------
After we "solo sample," track which channel(s) are using the sample and continuously
only solo those channels, if no channels are using it, then mute everything.


MIDI-IN
-------
Config menu
Specify Default Device
"Soft" pitch-bend range specifier
"Select Instrument"
There is a delay/latency/desync issue


EXPORT
=======
WAV Export
-----------
export .wavs of each individual channel all in one go
  . To do this, analyze Blargg's WAV export example from gme

SPC Export
----------
All SPC's should be exported with an ability to communicate with SNES
to reset back to Upload routine for ability for all tracks made with SNES Tracker
to be put into a playlist.


Instrument Thingy
-----------------
Graphical ADSR Envelope settings
-- Radio Buttons
-- Graphical ADSR waveform
Right-Click Context Menu
-- Download BRR, BRR+, BRRI

ALL
---
Import SPC

lots of things SHOULDN"T be done/updated if paused

Change run() to a function-pointer style and have a first_run() version of
the run function to better optimize speed, although size increase


DSP MAP
----------------
Export "GeneralDSP file"
Refactor DSP MAP
Put the Porttool and FilenameInfo into DSP MAP Display
Reduce Clickable_Text class in DSPMap to just SDL_Rect.. since that's all I'm using them for.. except for voice_title
Dir-was-used color highlighting like in memory view
--
--
"Sample/Instrument playback feature" -- backup SPC asm, Cause SPC to infinite loop, so that user
can play live samples from SPC as he/she pleases.. when done.. restore the SPC opcodes that were replaced with the
infinite loop.

Active Sample Ripping improvements -- Don't use relative BRR-end blocks anymore, reference the DIR/SRCN

Logical Coordinates System

Have a "Content section and Header section" like on a website
DSP Map



Strip Functional operation from Display operation in classes/structs.
Maybe i can subclass. struct Debugger_Voice_Control : public Voice_Control

Main Window
--------------
Gain slider and clipping notifier

Debugger Feature: Right click address that is being read/written and find out from where is the program accessing this memory.

Scrolling text at bottom-right when text is too long to read
If I click on "Time" I extend play-time by 1 min

--
Figuring out how to implement higher level audio algorithms..
like "pan from left to right over this course of this pattern for example"






Tracker features
-----------------
multiple effect columns

Custom FIR Filters (save to file)
add these FIR filters "Nintendo official"
0: 7F 00 00 00 00 00 00 00
1: 58 BF DB F0 FE 07 0C 0C
2: 0C 21 2B 2B 13 FE F3 F9
3: 34 33 00 D9 E5 01 FC EB
ones that I found: 
Super Metroid - Tension: 
4: 65 72 20 53 31 2e 32 30
Star Fox - Briefing (fast opening):
5: 80 ff 9a ff 67 ff 0f ff
Super Mario World:  (unused)
6: FF 08 17 24 24 17 08 FF

Optional:
---------




DISTANT SHIT
------------
SPC IMPORT -- Time signature detection
global instrument bank vs. song-only instrument bank
Song bank
