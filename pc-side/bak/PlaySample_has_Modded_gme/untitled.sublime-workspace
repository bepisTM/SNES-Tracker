{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ff",
				"ff_addr"
			],
			[
				"fsf",
				"fsf1_sp"
			],
			[
				"update",
				"update_stack_buffer"
			],
			[
				"libc_",
				"libc_binsh_addr"
			],
			[
				"peek_",
				"peek_system"
			],
			[
				"check",
				"check_ip_file"
			],
			[
				"read_",
				"read_with_timeout"
			],
			[
				"Con",
				"ControllerCar_PairInfo"
			],
			[
				"CON",
				"CONTROLLER_CONNECTED"
			],
			[
				"conn",
				"connection_status"
			],
			[
				"recv",
				"recv_rtthdr"
			],
			[
				"add",
				"remote_addrport"
			],
			[
				"xml",
				"xmlstr_tobe"
			],
			[
				"start_t",
				"start_timer"
			],
			[
				"RTO",
				"RTO_Toolkit"
			],
			[
				"connection",
				"connection_status"
			],
			[
				"pugi",
				"pugixml"
			],
			[
				"append",
				"append_child"
			],
			[
				"pug",
				"pugixml"
			],
			[
				"packet",
				"packet_doc_template"
			],
			[
				"append_",
				"append_attribute"
			],
			[
				"app",
				"append_attribute"
			],
			[
				"xml_",
				"xml_string_writer"
			],
			[
				"LocalP",
				"LocalProtocolAddr"
			],
			[
				"uint",
				"uint32_t"
			],
			[
				"connec",
				"connected_msg"
			],
			[
				"sockadd",
				"sockaddr_in"
			],
			[
				"map",
				"mapDaqSystemDaqDataDataReader_"
			],
			[
				"Get",
				"GetListener"
			],
			[
				"des",
				"deserialize"
			],
			[
				"Local",
				"LocalName"
			],
			[
				"sin",
				"sin_port"
			],
			[
				"Remote",
				"RemoteSocket"
			],
			[
				"background-i",
				"background-image"
			],
			[
				"current",
				"currentUsedCarNum"
			],
			[
				"curre",
				"currentUsedCarNum"
			],
			[
				"tags",
				"tagsFilename"
			],
			[
				"cu",
				"currentUsedCarNum"
			],
			[
				"cur",
				"currentCarNum"
			],
			[
				"curr",
				"currentCarNumFilename"
			],
			[
				"accordion",
				"accordionHeaderFontSize"
			],
			[
				"Enabl",
				"Enabler-IIG"
			],
			[
				"accod",
				"accordionEntry"
			],
			[
				"accordi",
				"accordionEntry"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Summary Notes.txt",
			"settings":
			{
				"buffer_size": 1006,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "",
			"file": "create_spc.sh",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/player/Music_Player.h",
			"settings":
			{
				"buffer_size": 1637,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/player/Music_Player.cpp",
			"settings":
			{
				"buffer_size": 5246,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 132 files for \"init\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/changes.txt:\n   50  \n   51  - Added Music_Emu::set_gain() for uniform adjustment of gain. Can only\n   52: be set during initialization, so not useful as a general volume control.\n   53  \n   54  - Added custom operator new to ensure that no exceptions are thrown in\n   ..\n   91  \n   92  - All: Improved interface to emulators to allow simpler setup and\n   93: loading. Instead of various init() functions, all now support\n   94  set_sample_rate( long rate ) and load( const char* file_path ).\n   95  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/license.txt:\n  137  making modifications to it.  For a library, complete source code means\n  138  all the source code for all modules it contains, plus any associated\n  139: interface definition files, plus the scripts used to control compilation\n  140  and installation of the library.\n  141  \n  ...\n  292      user can modify the Library and then relink to produce a modified\n  293      executable containing the modified Library.  (It is understood\n  294:     that the user who changes the contents of definitions files in the\n  295      Library will not necessarily be able to recompile the application\n  296:     to use the modified definitions.)\n  297  \n  298      b) Use a suitable shared library mechanism for linking with the\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Apu.cpp:\n  166  	require( final_end_time >= last_time );\n  167  	\n  168: 	// noise period and initial values\n  169  	blip_time_t const noise_period_factor = period_factor * 2; // verified\n  170  	blip_time_t noise_period = (regs [6] & 0x1F) * noise_period_factor;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Emu.cpp:\n  177  	if ( !blocks ) return \"File data missing\";\n  178  	\n  179: 	// initial addresses\n  180  	cpu::reset( mem.ram );\n  181  	r.sp = get_be16( more_data );\n  ...\n  188  	if ( !addr ) return \"File data missing\";\n  189  	\n  190: 	unsigned init = get_be16( more_data + 2 );\n  191: 	if ( !init )\n  192: 		init = addr;\n  193  	\n  194  	// copy blocks into memory\n  ...\n  225  	static byte const passive [] = {\n  226  		0xF3,       // DI\n  227: 		0xCD, 0, 0, // CALL init\n  228  		0xED, 0x5E, // LOOP: IM 2\n  229  		0xFB,       // EI\n  ...\n  233  	static byte const active [] = {\n  234  		0xF3,       // DI\n  235: 		0xCD, 0, 0, // CALL init\n  236  		0xED, 0x56, // LOOP: IM 1\n  237  		0xFB,       // EI\n  ...\n  249  		mem.ram [10] = play_addr >> 8;\n  250  	}\n  251: 	mem.ram [2] = init;\n  252: 	mem.ram [3] = init >> 8;\n  253  	\n  254  	mem.ram [0x38] = 0xFB; // Put EI at interrupt vector (followed by RET)\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Fir_Resampler.h:\n    1: // Finite impulse response (FIR) resampler with adjustable FIR size\n    2  \n    3  // Game_Music_Emu 0.5.2\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gb_Apu.cpp:\n  120  	write_register( 0, status_reg, 0x00 );\n  121  	\n  122: 	static unsigned char const initial_wave [] = {\n  123  		0x84,0x40,0x43,0xAA,0x2D,0x78,0x92,0x3C, // wave table\n  124  		0x60,0x59,0x59,0xB0,0x34,0xB8,0x2E,0xDA\n  125  	};\n  126: 	memcpy( wave.wave, initial_wave, sizeof wave.wave );\n  127  }\n  128  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.cpp:\n   37  	\n   38  	set_silence_lookahead( 6 );\n   39: 	set_max_initial_silence( 21 );\n   40  	set_gain( 1.2 );\n   41  	\n   ..\n  119  	\n  120  	unsigned load_addr = get_le16( header_.load_addr );\n  121: 	if ( (header_.load_addr [1] | header_.init_addr [1] | header_.play_addr [1]) > 0x7F ||\n  122  			load_addr < 0x400 )\n  123: 		set_warning( \"Invalid load/init/play address\" );\n  124  	\n  125  	set_voice_count( Gb_Apu::osc_count );\n  ...\n  231  	cpu::r.sp = get_le16( header_.stack_ptr );\n  232  	cpu_time  = 0;\n  233: 	cpu_jsr( get_le16( header_.init_addr ) );\n  234  	\n  235  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.h:\n   25  		byte first_track;\n   26  		byte load_addr [2];\n   27: 		byte init_addr [2];\n   28  		byte play_addr [2];\n   29  		byte stack_ptr [2];\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n   53  	\n   54  	// Get information for a track (length, name, author, etc.)\n   55: 	// See gme.h for definition of struct track_info_t.\n   56  	blargg_err_t track_info( track_info_t* out, int track ) const;\n   57  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.cpp:\n  242  	ram [0x1FE] = (idle_addr - 1) & 0xFF;\n  243  	r.sp = 0xFD;\n  244: 	r.pc = get_le16( header_.init_addr );\n  245  	r.a  = track;\n  246  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.h:\n   19  		byte vers;\n   20  		byte first_track;\n   21: 		byte init_addr [2];\n   22  		byte banks [8];\n   23  		byte data_tag [4];\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.cpp:\n  245  	ram [--r.sp] = idle_addr & 0xFF;\n  246  	r.b.a = track;\n  247: 	r.pc = get_le16( header_.init_addr );\n  248  	next_play = play_period;\n  249  	scc_accessed = false;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.h:\n   21  		byte load_addr [2];\n   22  		byte load_size [2];\n   23: 		byte init_addr [2];\n   24  		byte play_addr [2];\n   25  		byte first_bank;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n   59  	\n   60  	// defaults\n   61: 	max_initial_silence = 2;\n   62  	silence_lookahead   = 3;\n   63  	ignore_silence_     = false;\n   ..\n  145  	{\n  146  		// play until non-silence or end of track\n  147: 		for ( long end = max_initial_silence * stereo * sample_rate(); emu_time < end; )\n  148  		{\n  149  			fill_buf();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.h:\n   86  \n   87  	// Frequency equalizer parameters (see gme.txt)\n   88: 	// See gme.h for definition of struct gme_equalizer_t.\n   89  	typedef gme_equalizer_t equalizer_t;\n   90  	\n   ..\n  102  	~Music_Emu();\n  103  protected:\n  104: 	void set_max_initial_silence( int n )       { max_initial_silence = n; }\n  105  	void set_silence_lookahead( int n )         { silence_lookahead = n; }\n  106  	void set_voice_count( int n )               { voice_count_ = n; }\n  ...\n  125  	// general\n  126  	equalizer_t equalizer_;\n  127: 	int max_initial_silence;\n  128  	const char** voice_names_;\n  129  	int voice_count_;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Apu.cpp:\n   86  }\n   87  \n   88: void Nes_Apu::reset( bool pal_mode, int initial_dmc_dac )\n   89  {\n   90  	dmc.pal_mode = pal_mode;\n   ..\n  109  		write_register( 0, addr, (addr & 3) ? 0x00 : 0x10 );\n  110  	\n  111: 	dmc.dac = initial_dmc_dac;\n  112  	if ( !dmc.nonlinear )\n  113  		triangle.last_amp = 15;\n  114  	if ( !dmc.nonlinear ) // TODO: remove?\n  115: 		dmc.last_amp = initial_dmc_dac; // prevent output transition\n  116  }\n  117  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Apu.h:\n   47  	// Reset internal frame counter, registers, and all oscillators.\n   48  	// Use PAL timing if pal_timing is true, otherwise use NTSC timing.\n   49: 	// Set the DMC oscillator's initial DAC value to initial_dmc_dac without\n   50  	// any audible click.\n   51: 	void reset( bool pal_mode = false, int initial_dmc_dac = 0 );\n   52  	\n   53  	// Adjust frame period\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Oscs.h:\n  127  	bool nonlinear;\n  128  	\n  129: 	int (*prg_reader)( void*, nes_addr_t ); // needs to be initialized to prg read function\n  130  	void* prg_reader_data;\n  131  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.cpp:\n  156  }\n  157  \n  158: blargg_err_t Nsf_Emu::init_sound()\n  159  {\n  160  	if ( header_.chip_flags & ~(namco_flag | vrc6_flag | fme7_flag) )\n  ...\n  277  	\n  278  	// sound and memory\n  279: 	blargg_err_t err = init_sound();\n  280  	if ( err )\n  281  		return err;\n  ...\n  283  	// set up data\n  284  	nes_addr_t load_addr = get_le16( header_.load_addr );\n  285: 	init_addr = get_le16( header_.init_addr );\n  286  	play_addr = get_le16( header_.play_addr );\n  287  	if ( !load_addr ) load_addr = rom_begin;\n  288: 	if ( !init_addr ) init_addr = rom_begin;\n  289  	if ( !play_addr ) play_addr = rom_begin;\n  290: 	if ( load_addr < rom_begin || init_addr < rom_begin )\n  291  	{\n  292  		const char* w = warning();\n  293  		if ( !w )\n  294: 			w = \"Corrupt file (invalid load/init/play address)\";\n  295  		return w;\n  296  	}\n  ...\n  306  		if ( bank >= (unsigned) total_banks )\n  307  			bank = 0;\n  308: 		initial_banks [i] = bank;\n  309  		\n  310  		if ( header_.banks [i] )\n  311  		{\n  312  			// bank-switched\n  313: 			memcpy( initial_banks, header_.banks, sizeof initial_banks );\n  314  			break;\n  315  		}\n  ...\n  456  	cpu::map_code( sram_addr, sizeof sram, sram );\n  457  	for ( int i = 0; i < bank_count; ++i )\n  458: 		cpu_write( bank_select_addr + i, initial_banks [i] );\n  459  	\n  460  	apu.reset( pal_only, (header_.speed_flags & 0x20) ? 0x3F : 0 );\n  ...\n  477  	low_mem [0x1FE] = (badop_addr - 1) & 0xFF;\n  478  	r.sp = 0xFD;\n  479: 	r.pc = init_addr;\n  480  	r.a  = track;\n  481  	r.x  = pal_only;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.h:\n   25  		byte first_track;\n   26  		byte load_addr [2];\n   27: 		byte init_addr [2];\n   28  		byte play_addr [2];\n   29  		char game [32];\n   ..\n   64  protected:\n   65  	enum { bank_count = 8 };\n   66: 	byte initial_banks [bank_count];\n   67: 	nes_addr_t init_addr;\n   68  	nes_addr_t play_addr;\n   69  	double clock_rate_;\n   ..\n   95  	Nes_Apu apu;\n   96  	static int pcm_read( void*, nes_addr_t );\n   97: 	blargg_err_t init_sound();\n   98  	\n   99  	header_t header_;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.cpp:\n   81  {\n   82  	byte load_addr [2];\n   83: 	byte init_addr [2];\n   84  	byte play_addr [2];\n   85  	byte speed_flags;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.cpp:\n  128  			// skip line\n  129  		}\n  130: 		else if ( !strncmp( \"INIT\", tag, tag_len ) )\n  131  		{\n  132: 			out->init_addr = from_hex( in );\n  133: 			if ( (unsigned long) out->init_addr > 0xFFFF )\n  134: 				return \"Invalid init address\";\n  135  		}\n  136  		else if ( !strncmp( \"PLAYER\", tag, tag_len ) )\n  ...\n  247  	info.type       = 'B';\n  248  	info.stereo     = false;\n  249: 	info.init_addr  = -1;\n  250  	info.play_addr  = -1;\n  251  	info.music_addr = -1;\n  ...\n  303  }\n  304  \n  305: inline void Sap_Emu::call_init( int track )\n  306  {\n  307  	switch ( info.type )\n  ...\n  309  	case 'B':\n  310  		r.a = track;\n  311: 		run_routine( info.init_addr );\n  312  		break;\n  313  	\n  ...\n  358  	apu2.reset( &apu_impl );\n  359  	cpu::reset( mem.ram );\n  360: 	time_mask = 0; // disables sound during init\n  361: 	call_init( track );\n  362  	time_mask = -1;\n  363  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.h:\n   19  		byte const* rom_data;\n   20  		const char* warning;\n   21: 		long init_addr;\n   22  		long play_addr;\n   23  		long music_addr;\n   ..\n   63  	void call_play();\n   64  	void cpu_jsr( sap_addr_t );\n   65: 	void call_init( int track );\n   66  	void run_routine( sap_addr_t );\n   67  };\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Dsp.cpp:\n  105  // The counter starts at 30720 (0x7800). Each count divides exactly into\n  106  // 0x7800 without remainder.\n  107: const int env_rate_init = 0x7800;\n  108  static short const env_rates [0x20] =\n  109  {\n  ...\n  164  						break;\n  165  					envx += env_range / 64;\n  166: 					cnt = env_rate_init;\n  167  				}\n  168  				if ( envx >= env_range )\n  ...\n  183  				if ( cnt <= 0 )\n  184  				{\n  185: 					cnt = env_rate_init;\n  186  					envx -= ((envx - 1) >> 8) + 1;\n  187  					voice.envx = envx;\n  ...\n  201  				if ( cnt <= 0 )\n  202  				{\n  203: 					cnt = env_rate_init;\n  204  					envx -= ((envx - 1) >> 8) + 1;\n  205  					voice.envx = envx;\n  ...\n  236  			if (cnt > 0)\n  237  				break;\n  238: 			cnt = env_rate_init;\n  239  			envx -= env_range / 64;\n  240  			if ( envx < 0 )\n  ...\n  252  			if (cnt > 0)\n  253  				break;\n  254: 			cnt = env_rate_init;\n  255  			envx -= ((envx - 1) >> 8) + 1;\n  256  			if ( envx < 0 )\n  ...\n  267  			if (cnt > 0)\n  268  				break;\n  269: 			cnt = env_rate_init;\n  270  			envx += env_range / 64;\n  271  			if ( envx >= env_range )\n  ...\n  279  			if (cnt > 0)\n  280  				break;\n  281: 			cnt = env_rate_init;\n  282  			if ( envx < env_range * 3 / 4 )\n  283  				envx += env_range / 64;\n  ...\n  342  			if ( noise_count <= 0 )\n  343  			{\n  344: 				noise_count = env_rate_init;\n  345  				\n  346  				noise_amp = BOOST::int16_t (noise * 2);\n  ...\n  378  				voice.interp1 = 0;\n  379  				\n  380: 				// NOTE: Real SNES does *not* appear to initialize the\n  381  				// envelope counter to anything in particular. The first\n  382  				// cycle always seems to come at a random time sooner than \n  ...\n  384  				// pattern.  I doubt it will matter though, so we'll go\n  385  				// ahead and do the full time for now. \n  386: 				voice.envcnt = env_rate_init;\n  387  				voice.envstate = state_attack;\n  388  			}\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Audio_Scope.cpp:\n   40  }\n   41  \n   42: const char* Audio_Scope::init( int width, int height )\n   43  {\n   44  	assert( height <= 256 );\n   45: 	assert( !buf ); // can only call init() once\n   46  	\n   47  	buf = (byte*) calloc( width * sizeof *buf, 1 );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Audio_Scope.h:\n   10  	typedef const char* error_t;\n   11  	\n   12: 	// Initialize scope window of specified size. Height must be 256 or less.\n   13: 	error_t init( int width, int height );\n   14  	\n   15  	// Draw at most 'count' samples from 'in', skipping 'step' samples after\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.cpp:\n   32  // Simple sound driver using SDL\n   33  typedef void (*sound_callback_t)( void* data, short* out, int count );\n   34: static const char* sound_init( long sample_rate, int buf_size, sound_callback_t, void* data );\n   35  static void sound_start();\n   36  static void sound_stop();\n   ..\n   44  }\n   45  \n   46: blargg_err_t Music_Player::init( long rate )\n   47  {\n   48  	sample_rate = rate;\n   ..\n   53  		buf_size *= 2;\n   54  	\n   55: 	return sound_init( sample_rate, buf_size, fill_buffer, this );\n   56  }\n   57  \n   ..\n  191  }\n  192  \n  193: static const char* sound_init( long sample_rate, int buf_size,\n  194  		sound_callback_t cb, void* data )\n  195  {\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.h:\n    9  class Music_Player {\n   10  public:\n   11: 	// Initialize player and set sample rate\n   12: 	blargg_err_t init( long sample_rate = 44100 );\n   13  	\n   14  	// Load game music file. NULL on success, otherwise error string.\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/player.cpp:\n   27  static short scope_buf [scope_width * 2];\n   28  \n   29: static void init()\n   30  {\n   31  	// Start SDL\n   32: 	if ( SDL_Init( SDL_INIT_VIDEO | SDL_INIT_AUDIO ) < 0 )\n   33  		exit( EXIT_FAILURE );\n   34  	atexit( SDL_Quit );\n   35  	SDL_EnableKeyRepeat( 500, 80 );\n   36  	\n   37: 	// Init scope\n   38  	scope = new Audio_Scope;\n   39  	if ( !scope )\n   40  		handle_error( \"Out of memory\" );\n   41: 	if ( scope->init( scope_width, 256 ) )\n   42: 		handle_error( \"Couldn't initialize scope\" );\n   43  	memset( scope_buf, 0, sizeof scope_buf );\n   44  	\n   ..\n   47  	if ( !player )\n   48  		handle_error( \"Out of memory\" );\n   49: 	handle_error( player->init() );\n   50  	player->set_scope_buffer( scope_buf, scope_width * 2 );\n   51  }\n   ..\n   81  int main( int argc, char** argv )\n   82  {\n   83: 	init();\n   84  	\n   85  	// Load file\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/snes-side/header.inc:\n   12    DEFAULTSLOT 0                 ; There's only 1 slot in SNES, there are more in other consoles.\n   13    SLOT 0 $8000                  ; Define's Slot 0's starting address.\n   14: .ENDME          ; End MemoryMap definition\n   15  \n   16  .ROMBANKSIZE $8000              ; Every ROM bank is 32 KBytes in size\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/snes-side/InitSNES.asm:\n    7  \n    8  ;----------------------------------------------------------------------------\n    9: ; InitSNES -- my \"standard\" initialization of SNES memory and registers\n   10  ;----------------------------------------------------------------------------\n   11: .MACRO InitSNES\n   12    sei                     ;disable interrupts\n   13    clc                     ;switch to native mode\n   ..\n   20    TXS			;Transfer Index X to Stack Pointer Register\n   21  \n   22:   ;do the rest of the initialization in a routine\n   23    JSL $008000\n   24  \n   ..\n   30  .BANK 0 SLOT 0\n   31  .ORG 0\n   32: .SECTION \"InitializeSNESCode\" FORCE\n   33  \n   34: InitializeSNES:\n   35    PHK			;set Data Bank = Program Bank\n   36    PLB\n   ..\n   65  \n   66    LDA #$80		;reg $2115\n   67:   STA $2115		; Initialize VRAM transfer mode to word-access, increment by 1\n   68  \n   69    STZ $2116		;regs $2117-$2117\n   ..\n   71  \n   72  			;reg $2118-$2119\n   73: 			;VRAM write register... don't need to initialize\n   74  \n   75    STZ $211A		;clear Mode7 setting\n   ..\n   83    BNE _Loop02\n   84  \n   85: 			;reg $2121 - Color address, doesn't need initilaizing\n   86: 			;reg $2122 - Color data, is initialized later\n   87  \n   88    LDX #$2123\n   ..\n   95    STA $2130\n   96  \n   97: 			;regs $2134-$2136  - multiplication result, no initialization needed\n   98: 			;reg $2137 - software H/V latch, no initialization needed\n   99: 			;reg $2138 - Sprite data read, no initialization needed\n  100: 			;regs $2139-$213A  - VRAM data read, no initialization needed\n  101: 			;reg $213B - Color RAM data read, no initialization needed\n  102: 			;regs $213C-$213D  - H/V latched data read, no initialization needed\n  103  \n  104    STZ $213E		;reg $213E - might not be necesary, but selects PPU master/slave mode\n  105: 			;reg $213F - PPU status flag, no initialization needed\n  106  \n  107: 			;reg $2140-$2143 - APU communication regs, no initialization required\n  108  \n  109: 			;reg $2180  -  read/write WRAM register, no initialization required\n  110: 			;reg $2181-$2183  -  WRAM address, no initialization required\n  111  \n  112: 			;reg $4016-$4017  - serial JoyPad read registers, no need to initialize\n  113  \n  114  \n  ...\n  116  \n  117    LDA #$FF\n  118:   STA $4201		;reg $4201  - programmable I/O write port, initalize to allow reading at in-port\n  119  \n  120: 			;regs $4202-$4203  - multiplication registers, no initialization required\n  121: 			;regs $4204-$4206  - division registers, no initialization required\n  122  \n  123: 			;regs $4207-$4208  - Horizontal-IRQ timer setting, since we disabled this, it is OK to not init\n  124: 			;regs $4209-$420A  - Vertical-IRQ timer setting, since we disabled this, it is OK to not init\n  125  \n  126    STZ $420B		;reg $420B  - turn off all general DMA channels\n  ...\n  131    LDA $4210		;reg $4210  - NMI status, reading resets\n  132  \n  133: 			;reg $4211  - IRQ status, no need to initialize\n  134: 			;reg $4212  - H/V blank and JoyRead status, no need to initialize\n  135: 			;reg $4213  - programmable I/O inport, no need to initialize\n  136  \n  137: 			;reg $4214-$4215  - divide results, no need to initialize\n  138: 			;reg $4216-$4217  - multiplication or remainder results, no need to initialize\n  139  \n  140: 			;regs $4218-$421f  - JoyPad read registers, no need to initialize\n  141  \n  142  			;regs $4300-$437F\n  ...\n  150    ;**** clear Sprite tables ********\n  151  \n  152:   STZ $2102	;sprites initialized to be off the screen, palette 0, character 0\n  153    STZ $2103\n  154    LDX #$0080\n  ...\n  183    STX $4305         ;Set transfer size to 64k bytes\n  184    LDA #$01\n  185:   STA $420B         ;Initiate transfer\n  186  \n  187    LDA #$01          ;now set the next 64k bytes\n  188:   STA $420B         ;Initiate transfer\n  189  \n  190    PHK			;make sure Data Bank = Program Bank\n  ...\n  229     STX $4305         ;Set transfer size to 64k-1 bytes\n  230     LDA #$01\n  231:    STA $420B         ;Initiate transfer\n  232  \n  233     STZ $2119         ;clear the last byte of the VRAM\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/snes-side/music.asm:\n    2  .INCLUDE \"header.inc\"\n    3  \n    4: ;== Include SNES Initialization routines ==\n    5: .INCLUDE \"InitSNES.asm\"\n    6  \n    7  \n    .\n   15  \n   16  Start:\n   17:     InitSNES\n   18      \n   19      rep #$10\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/snes-side/spc.asm:\n    1  .org $1000\n    2  Main:\n    3:     call Init\n    4  infin:\n    5      bra infin\n    6      \n    7: Init:\n    8      mov $F2, #$00       ; left volume = 127\n    9      mov $F3, #127\n\n141 matches across 33 files\n\n\nSearching 132 files for \"RETURN_ERR\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Emu.cpp:\n  102  	blargg_err_t load_mem_( byte const* begin, long size )\n  103  	{\n  104: 		RETURN_ERR( parse_header( begin, size, &file ) );\n  105  		set_track_count( file.header->max_track + 1 );\n  106  		return 0;\n  ...\n  125  	assert( offsetof (header_t,track_info [2]) == header_size );\n  126  	\n  127: 	RETURN_ERR( parse_header( in, size, &file ) );\n  128  	set_track_count( file.header->max_track + 1 );\n  129  	\n  ...\n  159  blargg_err_t Ay_Emu::start_track_( int track )\n  160  {\n  161: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  162  	\n  163  	memset( mem.ram + 0x0000, 0xC9, 0x100 ); // fill RST vectors with RET\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/blargg_source.h:\n   29  \n   30  // If expr yields error string, return it from current function, otherwise continue.\n   31: #undef RETURN_ERR\n   32: #define RETURN_ERR( expr ) do {                         \\\n   33: 		blargg_err_t blargg_return_err_ = (expr);               \\\n   34: 		if ( blargg_return_err_ ) return blargg_return_err_;    \\\n   35  	} while ( 0 )\n   36  \n   ..\n   69  // deprecated\n   70  #define BLARGG_CHECK_ALLOC CHECK_ALLOC\n   71: #define BLARGG_RETURN_ERR RETURN_ERR\n   72  \n   73  // BLARGG_SOURCE_BEGIN: If defined, #included, allowing redefition of ddprintf and check\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Classic_Emu.cpp:\n   83  {\n   84  	change_clock_rate( rate );\n   85: 	RETURN_ERR( buf->set_channel_count( voice_count() ) );\n   86  	set_equalizer( equalizer() );\n   87  	buf_changed_count = buf->channels_changed_count();\n   ..\n   91  blargg_err_t Classic_Emu::start_track_( int track )\n   92  {\n   93: 	RETURN_ERR( Music_Emu::start_track_( track ) );\n   94  	buf->clear();\n   95  	return 0;\n   ..\n  111  			int msec = buf->length();\n  112  			blip_time_t clocks_emulated = (blargg_long) msec * clock_rate_ / 1000;\n  113: 			RETURN_ERR( run_clocks( clocks_emulated, msec ) );\n  114  			assert( clocks_emulated );\n  115  			buf->end_frame( clocks_emulated );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Data_Reader.cpp:\n   46  			n = count;\n   47  		count -= n;\n   48: 		RETURN_ERR( read( buf, n ) );\n   49  	}\n   50  	return 0;\n   ..\n  280  	close();\n  281  	\n  282: 	RETURN_ERR( get_gzip_eof( path, &size_ ) );\n  283  	\n  284  	file_ = gzopen( path, \"rb\" );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Dual_Resampler.cpp:\n   28  {\n   29  	// expand allocations a bit\n   30: 	RETURN_ERR( sample_buf.resize( (pairs + (pairs >> 2)) * 2 ) );\n   31  	resize( pairs );\n   32  	resampler_size = oversamples_per_frame + (oversamples_per_frame >> 2);\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Effects_Buffer.cpp:\n   82  {\n   83  	if ( !echo_buf.size() )\n   84: 		RETURN_ERR( echo_buf.resize( echo_size ) );\n   85  	\n   86  	if ( !reverb_buf.size() )\n   87: 		RETURN_ERR( reverb_buf.resize( reverb_size ) );\n   88  	\n   89  	for ( int i = 0; i < buf_count; i++ )\n   90: 		RETURN_ERR( bufs [i].set_sample_rate( rate, msec ) );\n   91  	\n   92  	config( config_ );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Fir_Resampler.cpp:\n   80  blargg_err_t Fir_Resampler_::buffer_size( int new_size )\n   81  {\n   82: 	RETURN_ERR( buf.resize( new_size + write_offset ) );\n   83  	clear();\n   84  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.cpp:\n  107  {\n  108  	assert( offsetof (header_t,copyright [32]) == header_size );\n  109: 	RETURN_ERR( rom.load( in, header_size, &header_, 0 ) );\n  110  	\n  111  	set_track_count( header_.track_count );\n  112: 	RETURN_ERR( check_gbs_header( &header_ ) );\n  113  	\n  114  	if ( header_.vers != 1 )\n  ...\n  201  blargg_err_t Gbs_Emu::start_track_( int track )\n  202  {\n  203: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  204  	\n  205  	memset( ram, 0, 0x4000 );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/gme.cpp:\n  102  		char header [4];\n  103  		GME_FILE_READER in;\n  104: 		RETURN_ERR( in.open( path ) );\n  105: 		RETURN_ERR( in.read( header, sizeof header ) );\n  106  		*type_out = gme_identify_extension( gme_identify_header( header ) );\n  107  	}\n  ...\n  139  	\n  140  	GME_FILE_READER in;\n  141: 	RETURN_ERR( in.open( path ) );\n  142  	\n  143  	char header [4];\n  ...\n  148  	{\n  149  		header_size = sizeof header;\n  150: 		RETURN_ERR( in.read( header, sizeof header ) );\n  151  		file_type = gme_identify_extension( gme_identify_header( header ) );\n  152  	}\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n   60  blargg_err_t Gme_File::load_( Data_Reader& in )\n   61  {\n   62: 	RETURN_ERR( file_data.resize( in.remain() ) );\n   63: 	RETURN_ERR( in.read( file_data.begin(), file_data.size() ) );\n   64  	return load_mem_( file_data.begin(), file_data.size() );\n   65  }\n   ..\n  101  	pre_load();\n  102  	GME_FILE_READER in;\n  103: 	RETURN_ERR( in.open( path ) );\n  104  	return post_load( load_( in ) );\n  105  }\n  ...\n  195  	\n  196  	int remapped = track;\n  197: 	RETURN_ERR( remap_track_( &remapped ) );\n  198: 	RETURN_ERR( track_info_( out, remapped ) );\n  199  	\n  200  	// override with m3u info\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gym_Emu.cpp:\n  176  	fm_sample_rate = sample_rate * factor;\n  177  	\n  178: 	RETURN_ERR( blip_buf.set_sample_rate( sample_rate, int (1000 / 60.0 / min_tempo) ) );\n  179  	blip_buf.clock_rate( clock_rate );\n  180  	\n  181: 	RETURN_ERR( fm.set_rate( fm_sample_rate, base_clock / 7.0 ) );\n  182: 	RETURN_ERR( Dual_Resampler::reset( long (1.0 / 60 / min_tempo * sample_rate) ) );\n  183  	\n  184  	return 0;\n  ...\n  212  	assert( offsetof (header_t,packed [4]) == header_size );\n  213  	int offset = 0;\n  214: 	RETURN_ERR( check_header( in, size, &offset ) );\n  215  	set_voice_count( 8 );\n  216  	\n  ...\n  231  blargg_err_t Gym_Emu::start_track_( int track )\n  232  {\n  233: 	RETURN_ERR( Music_Emu::start_track_( track ) );\n  234  	\n  235  	pos         = data;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.cpp:\n  140  {\n  141  	assert( offsetof (header_t,unused [4]) == header_size );\n  142: 	RETURN_ERR( rom.load( in, header_size, &header_, unmapped ) );\n  143  	\n  144: 	RETURN_ERR( check_hes_header( header_.tag ) );\n  145  	\n  146  	if ( header_.vers != 0 )\n  ...\n  213  blargg_err_t Hes_Emu::start_track_( int track )\n  214  {\n  215: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  216  	\n  217  	memset( ram, 0, sizeof ram ); // some HES music relies on zero fill\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.cpp:\n  122  	assert( offsetof (header_t,device_flags) == header_size - 1 );\n  123  	assert( offsetof (ext_header_t,msx_audio_vol) == ext_header_size - 1 );\n  124: 	RETURN_ERR( rom.load( in, header_size, STATIC_CAST(header_t*,&header_), 0 ) );\n  125  	\n  126: 	RETURN_ERR( check_kss_header( header_.tag ) );\n  127  	\n  128  	if ( header_.tag [3] == 'C' )\n  ...\n  192  blargg_err_t Kss_Emu::start_track_( int track )\n  193  {\n  194: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  195  \n  196  	memset( ram, 0xC9, 0x4000 );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/M3u_Playlist.cpp:\n  376  		{\n  377  			if ( (int) entries.size() <= count )\n  378: 				RETURN_ERR( entries.resize( count * 2 + 64 ) );\n  379  			\n  380  			if ( !parse_line( begin, entries [count] ) )\n  ...\n  407  blargg_err_t M3u_Playlist::load( Data_Reader& in )\n  408  {\n  409: 	RETURN_ERR( data.resize( in.remain() + 1 ) );\n  410: 	RETURN_ERR( in.read( data.begin(), data.size() - 1 ) );\n  411  	return parse();\n  412  }\n  ...\n  415  {\n  416  	GME_FILE_READER in;\n  417: 	RETURN_ERR( in.open( path ) );\n  418  	return load( in );\n  419  }\n  ...\n  421  blargg_err_t M3u_Playlist::load( void const* in, long size )\n  422  {\n  423: 	RETURN_ERR( data.resize( size + 1 ) );\n  424  	memcpy( data.begin(), in, size );\n  425  	return parse();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Multi_Buffer.cpp:\n   52  blargg_err_t Mono_Buffer::set_sample_rate( long rate, int msec )\n   53  {\n   54: 	RETURN_ERR( buf.set_sample_rate( rate, msec ) );\n   55  	return Multi_Buffer::set_sample_rate( buf.sample_rate(), buf.length() );\n   56  }\n   ..\n   70  {\n   71  	for ( int i = 0; i < buf_count; i++ )\n   72: 		RETURN_ERR( bufs [i].set_sample_rate( rate, msec ) );\n   73  	return Multi_Buffer::set_sample_rate( bufs [0].sample_rate(), bufs [0].length() );\n   74  }\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n   78  {\n   79  	require( !sample_rate() ); // sample rate can't be changed once set\n   80: 	RETURN_ERR( set_sample_rate_( rate ) );\n   81: 	RETURN_ERR( buf.resize( buf_size ) );\n   82  	sample_rate_ = rate;\n   83  	return 0;\n   ..\n  135  	\n  136  	int remapped = track;\n  137: 	RETURN_ERR( remap_track_( &remapped ) );\n  138  	current_track_ = track;\n  139: 	RETURN_ERR( start_track_( remapped ) );\n  140  	\n  141  	emu_track_ended_ = false;\n  ...\n  189  	blargg_long time = msec_to_samples( msec );\n  190  	if ( time < out_time )\n  191: 		RETURN_ERR( start_track( current_track_ ) );\n  192  	return skip( time - out_time );\n  193  }\n  ...\n  232  		while ( count > threshold / 2 && !emu_track_ended_ )\n  233  		{\n  234: 			RETURN_ERR( play_( buf_size, buf.begin() ) );\n  235  			count -= buf_size;\n  236  		}\n  ...\n  245  			n = count;\n  246  		count -= n;\n  247: 		RETURN_ERR( play_( n, buf.begin() ) );\n  248  	}\n  249  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.cpp:\n  268  {\n  269  	assert( offsetof (header_t,unused [4]) == header_size );\n  270: 	RETURN_ERR( rom.load( in, header_size, &header_, 0 ) );\n  271  	\n  272  	set_track_count( header_.track_count );\n  273: 	RETURN_ERR( check_nsf_header( &header_ ) );\n  274  	\n  275  	if ( header_.vers != 1 )\n  ...\n  448  blargg_err_t Nsf_Emu::start_track_( int track )\n  449  {\n  450: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  451  	\n  452  	memset( low_mem, 0, sizeof low_mem );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.cpp:\n   52  		blargg_vector<const char*>& strs )\n   53  {\n   54: 	RETURN_ERR( chars.resize( size + 1 ) );\n   55  	chars [size] = 0; // in case last string doesn't have terminator\n   56: 	RETURN_ERR( in.read( &chars [0], size ) );\n   57  	\n   58: 	RETURN_ERR( strs.resize( 128 ) );\n   59  	int count = 0;\n   60  	for ( int i = 0; i < size; i++ )\n   61  	{\n   62  		if ( (int) strs.size() <= count )\n   63: 			RETURN_ERR( strs.resize( count * 2 ) );\n   64  		strs [count++] = &chars [i];\n   65  		while ( i < size && chars [i] )\n   ..\n  132  		// read size and tag\n  133  		byte block_header [2] [4];\n  134: 		RETURN_ERR( in.read( block_header, sizeof block_header ) );\n  135  		blargg_long size = get_le32( block_header [0] );\n  136  		blargg_long tag  = get_le32( block_header [1] );\n  ...\n  149  				finfo.first_track = 0;\n  150  				\n  151: 				RETURN_ERR( in.read( &finfo, min( size, (blargg_long) nsfe_info_size ) ) );\n  152  				if ( size > nsfe_info_size )\n  153: 					RETURN_ERR( in.skip( size - nsfe_info_size ) );\n  154  				phase = 1;\n  155  				info.speed_flags = finfo.speed_flags;\n  ...\n  165  				if ( size > (int) sizeof info.banks )\n  166  					return \"Corrupt file\";\n  167: 				RETURN_ERR( in.read( info.banks, size ) );\n  168  				break;\n  169  			\n  ...\n  171  				blargg_vector<char> chars;\n  172  				blargg_vector<const char*> strs;\n  173: 				RETURN_ERR( read_strs( in, size, chars, strs ) );\n  174  				int n = strs.size();\n  175  				\n  ...\n  190  			\n  191  			case BLARGG_4CHAR('e','m','i','t'):\n  192: 				RETURN_ERR( track_times.resize( size / 4 ) );\n  193: 				RETURN_ERR( in.read( track_times.begin(), track_times.size() * 4 ) );\n  194  				break;\n  195  			\n  196  			case BLARGG_4CHAR('l','b','l','t'):\n  197: 				RETURN_ERR( read_strs( in, size, track_name_data, track_names ) );\n  198  				break;\n  199  			\n  200  			case BLARGG_4CHAR('t','s','l','p'):\n  201: 				RETURN_ERR( playlist.resize( size ) );\n  202: 				RETURN_ERR( in.read( &playlist [0], size ) );\n  203  				break;\n  204  			\n  ...\n  208  				if ( !nsf_emu )\n  209  				{\n  210: 					RETURN_ERR( in.skip( size ) );\n  211  				}\n  212  				else\n  ...\n  214  					Subset_Reader sub( &in, size ); // limit emu to nsf data\n  215  					Remaining_Reader rem( &header, Nsf_Emu::header_size, &sub );\n  216: 					RETURN_ERR( nsf_emu->load( rem ) );\n  217  					check( rem.remain() == 0 );\n  218  				}\n  ...\n  228  				// tags that can be skipped start with a lowercase character\n  229  				check( islower( (tag >> 24) & 0xFF ) );\n  230: 				RETURN_ERR( in.skip( size ) );\n  231  				break;\n  232  		}\n  ...\n  283  	blargg_err_t load_( Data_Reader& in )\n  284  	{\n  285: 		RETURN_ERR( info.load( in, 0 ) );\n  286  		info.disable_playlist( false );\n  287  		set_track_count( info.info.track_count );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.cpp:\n  221  	blargg_err_t load_mem_( byte const* begin, long size )\n  222  	{\n  223: 		RETURN_ERR( parse_info( begin, size, &info ) );\n  224  		set_track_count( info.track_count );\n  225  		return 0;\n  ...\n  251  	info.music_addr = -1;\n  252  	info.fastplay   = 312;\n  253: 	RETURN_ERR( parse_info( in, size, &info ) );\n  254  	\n  255  	set_warning( info.warning );\n  ...\n  326  blargg_err_t Sap_Emu::start_track_( int track )\n  327  {\n  328: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  329  	\n  330  	memset( &mem, 0, sizeof mem );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Snes_Spc.cpp:\n  429  		keys_released = 0;\n  430  		// sentinel tells play to ignore DSP\n  431: 		RETURN_ERR( play( count - sync_count, skip_sentinel ) );\n  432  		\n  433  		// press/release keys now\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.cpp:\n  219  		if ( file_size < Snes_Spc::spc_file_size )\n  220  			return gme_wrong_file_type;\n  221: 		RETURN_ERR( in.read( &header, Spc_Emu::header_size ) );\n  222: 		RETURN_ERR( check_spc_header( header.tag ) );\n  223  		long const xid6_offset = 0x10200;\n  224  		long xid6_size = file_size - xid6_offset;\n  225  		if ( xid6_size > 0 )\n  226  		{\n  227: 			RETURN_ERR( xid6.resize( xid6_size ) );\n  228: 			RETURN_ERR( in.skip( xid6_offset - Spc_Emu::header_size ) );\n  229: 			RETURN_ERR( in.read( xid6.begin(), xid6.size() ) );\n  230  		}\n  231  		return 0;\n  ...\n  251  	if ( sample_rate != native_sample_rate )\n  252  	{\n  253: 		RETURN_ERR( resampler.buffer_size( native_sample_rate / 20 * 2 ) );\n  254  		resampler.time_ratio( (double) native_sample_rate / sample_rate, 0.9965 );\n  255  	}\n  ...\n  280  blargg_err_t Spc_Emu::start_track_( int track )\n  281  {\n  282: 	RETURN_ERR( Music_Emu::start_track_( track ) );\n  283  	resampler.clear();\n  284: 	RETURN_ERR( apu.load_spc( file_data, file_size ) );\n  285  	apu.clear_echo();\n  286  	return 0;\n  ...\n  298  	\n  299  	if ( count > 0 )\n  300: 		RETURN_ERR( apu.skip( count ) );\n  301  	\n  302  	// eliminate pop due to resampler\n  ...\n  318  		{\n  319  			long n = resampler.max_write();\n  320: 			RETURN_ERR( apu.play( n, resampler.buffer() ) );\n  321  			resampler.write( n );\n  322  		}\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Vgm_Emu.cpp:\n  172  			return gme_wrong_file_type;\n  173  		\n  174: 		RETURN_ERR( in.read( &h, Vgm_Emu::header_size ) );\n  175: 		RETURN_ERR( check_vgm_header( h ) );\n  176  		\n  177  		long gd3_offset = get_le32( h.gd3_offset ) - 0x2C;\n  ...\n  180  		if ( gd3_offset > 0 || remain >= gd3_header_size )\n  181  		{\n  182: 			RETURN_ERR( in.skip( gd3_offset ) );\n  183: 			RETURN_ERR( in.read( gd3_h, sizeof gd3_h ) );\n  184  			long gd3_size = check_gd3_header( gd3_h, remain );\n  185  			if ( gd3_size )\n  186  			{\n  187: 				RETURN_ERR( gd3.resize( gd3_size ) );\n  188: 				RETURN_ERR( in.read( gd3.begin(), gd3.size() ) );\n  189  			}\n  190  		}\n  ...\n  227  blargg_err_t Vgm_Emu::set_sample_rate_( long sample_rate )\n  228  {\n  229: 	RETURN_ERR( blip_buf.set_sample_rate( sample_rate, 1000 / 30 ) );\n  230  	return Classic_Emu::set_sample_rate_( sample_rate );\n  231  }\n  ...\n  277  	header_t const& h = *(header_t const*) new_data;\n  278  	\n  279: 	RETURN_ERR( check_vgm_header( h ) );\n  280  	\n  281  	check( get_le32( h.version ) <= 0x150 );\n  ...\n  297  	set_voice_count( psg.osc_count );\n  298  	\n  299: 	RETURN_ERR( setup_fm() );\n  300  	\n  301  	static const char* const fm_names [] = {\n  ...\n  326  			fm_rate = ym2612_rate / 144.0;\n  327  		Dual_Resampler::setup( fm_rate / blip_buf.sample_rate(), rolloff, fm_gain * gain() );\n  328: 		RETURN_ERR( ym2612.set_rate( fm_rate, ym2612_rate ) );\n  329  		ym2612.enable( true );\n  330  		set_voice_count( 8 );\n  ...\n  347  	if ( uses_fm )\n  348  	{\n  349: 		RETURN_ERR( Dual_Resampler::reset( blip_buf.length() * blip_buf.sample_rate() / 1000 ) );\n  350  		psg.volume( 0.135 * fm_gain * gain() );\n  351  	}\n  ...\n  364  blargg_err_t Vgm_Emu::start_track_( int track )\n  365  {\n  366: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  367  	psg.reset( get_le16( header().noise_feedback ), header().noise_width );\n  368  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.cpp:\n   73  	stop();\n   74  	\n   75: 	RETURN_ERR( gme_open_file( path, &emu_, sample_rate ) );\n   76  	\n   77  	char m3u_path [256 + 5];\n   ..\n   98  		// Sound must not be running when operating on emulator\n   99  		sound_stop();\n  100: 		RETURN_ERR( emu_->start_track( track ) );\n  101  		\n  102  		// Calculate track length\n\n106 matches across 23 files\n\n\nSearching 132 files for \"#define RETURN_ERR\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/blargg_source.h:\n   30  // If expr yields error string, return it from current function, otherwise continue.\n   31  #undef RETURN_ERR\n   32: #define RETURN_ERR( expr ) do {                         \\\n   33  		blargg_err_t blargg_return_err_ = (expr);               \\\n   34  		if ( blargg_return_err_ ) return blargg_return_err_;    \\\n\n1 match in 1 file\n\n\nSearching 132 files for \"clear_track_vars\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n   27  Music_Emu::equalizer_t const Music_Emu::tv_eq = { -8.0, 180 };\n   28  \n   29: void Music_Emu::clear_track_vars()\n   30  {\n   31  	current_track_   = -1;\n   ..\n   45  {\n   46  	voice_count_ = 0;\n   47: 	clear_track_vars();\n   48  	Gme_File::unload();\n   49  }\n   ..\n  132  blargg_err_t Music_Emu::start_track( int track )\n  133  {\n  134: 	clear_track_vars();\n  135  	\n  136  	int remapped = track;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.h:\n  141  	bool emu_track_ended_; // emulator has reached end of track\n  142  	volatile bool track_ended_;\n  143: 	void clear_track_vars();\n  144  	void end_track_if_error( blargg_err_t );\n  145  	\n\n4 matches across 2 files\n\n\nSearching 132 files for \"remap_track_\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n  152  }\n  153  \n  154: blargg_err_t Gme_File::remap_track_( int* track_io ) const\n  155  {\n  156  	if ( (unsigned) *track_io >= (unsigned) track_count() )\n  ...\n  195  	\n  196  	int remapped = track;\n  197: 	RETURN_ERR( remap_track_( &remapped ) );\n  198  	RETURN_ERR( track_info_( out, remapped ) );\n  199  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n   92  	\n   93  public:\n   94: 	blargg_err_t remap_track_( int* track_io ) const; // need by Music_Emu\n   95  private:\n   96  	// noncopyable\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n  135  	\n  136  	int remapped = track;\n  137: 	RETURN_ERR( remap_track_( &remapped ) );\n  138  	current_track_ = track;\n  139  	RETURN_ERR( start_track_( remapped ) );\n\n4 matches across 3 files\n\n\nSearching 132 files for \"start_track_\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Emu.cpp:\n  157  }\n  158  \n  159: blargg_err_t Ay_Emu::start_track_( int track )\n  160  {\n  161: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  162  	\n  163  	memset( mem.ram + 0x0000, 0xC9, 0x100 ); // fill RST vectors with RET\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Emu.h:\n   39  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   40  	blargg_err_t load_mem_( byte const*, long );\n   41: 	blargg_err_t start_track_( int );\n   42  	blargg_err_t run_clocks( blip_time_t&, int );\n   43  	void set_tempo_( double );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Classic_Emu.cpp:\n   89  }\n   90  \n   91: blargg_err_t Classic_Emu::start_track_( int track )\n   92  {\n   93: 	RETURN_ERR( Music_Emu::start_track_( track ) );\n   94  	buf->clear();\n   95  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Classic_Emu.h:\n   26  			Blip_Buffer* left, Blip_Buffer* right ) = 0;\n   27  	virtual void update_eq( blip_eq_t const& ) = 0;\n   28: 	virtual blargg_err_t start_track_( int track ) = 0;\n   29  	virtual blargg_err_t run_clocks( blip_time_t& time_io, int msec ) = 0;\n   30  protected:\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.cpp:\n  199  }\n  200  \n  201: blargg_err_t Gbs_Emu::start_track_( int track )\n  202  {\n  203: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  204  	\n  205  	memset( ram, 0, 0x4000 );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.h:\n   52  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   53  	blargg_err_t load_( Data_Reader& );\n   54: 	blargg_err_t start_track_( int );\n   55  	blargg_err_t run_clocks( blip_time_t&, int );\n   56  	void set_tempo_( double );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gym_Emu.cpp:\n  229  // Emulation\n  230  \n  231: blargg_err_t Gym_Emu::start_track_( int track )\n  232  {\n  233: 	RETURN_ERR( Music_Emu::start_track_( track ) );\n  234  	\n  235  	pos         = data;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gym_Emu.h:\n   48  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   49  	blargg_err_t set_sample_rate_( long sample_rate );\n   50: 	blargg_err_t start_track_( int );\n   51  	blargg_err_t play_( long count, sample_t* );\n   52  	void mute_voices_( int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.cpp:\n  211  }\n  212  \n  213: blargg_err_t Hes_Emu::start_track_( int track )\n  214  {\n  215: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  216  	\n  217  	memset( ram, 0, sizeof ram ); // some HES music relies on zero fill\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.h:\n   38  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   39  	blargg_err_t load_( Data_Reader& );\n   40: 	blargg_err_t start_track_( int );\n   41  	blargg_err_t run_clocks( blip_time_t&, int );\n   42  	void set_tempo_( double );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.cpp:\n  190  }\n  191  \n  192: blargg_err_t Kss_Emu::start_track_( int track )\n  193  {\n  194: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  195  \n  196  	memset( ram, 0xC9, 0x4000 );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.h:\n   54  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   55  	blargg_err_t load_( Data_Reader& );\n   56: 	blargg_err_t start_track_( int );\n   57  	blargg_err_t run_clocks( blip_time_t&, int );\n   58  	void set_tempo_( double );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n  137  	RETURN_ERR( remap_track_( &remapped ) );\n  138  	current_track_ = track;\n  139: 	RETURN_ERR( start_track_( remapped ) );\n  140  	\n  141  	emu_track_ended_ = false;\n  ...\n  407  void         Gme_Info_::mute_voices_( int )                 { check( false ); }\n  408  void         Gme_Info_::set_tempo_( double )                { }\n  409: blargg_err_t Gme_Info_::start_track_( int )                 { return \"Use full emulator for playback\"; }\n  410  blargg_err_t Gme_Info_::play_( long, sample_t* )            { return \"Use full emulator for playback\"; }\n  411  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.h:\n  115  	virtual void mute_voices_( int mask ) = 0;\n  116  	virtual void set_tempo_( double ) = 0;\n  117: 	virtual blargg_err_t start_track_( int ) = 0; // tempo is set before this\n  118  	virtual blargg_err_t play_( long count, sample_t* out ) = 0;\n  119  	virtual blargg_err_t skip_( long count );\n  ...\n  172  	virtual void mute_voices_( int mask );\n  173  	virtual void set_tempo_( double );\n  174: 	virtual blargg_err_t start_track_( int );\n  175  	virtual blargg_err_t play_( long count, sample_t* out );\n  176  	virtual void pre_load();\n  ...\n  193  inline void Music_Emu::remute_voices()              { mute_voices( mute_mask_ ); }\n  194  inline void Music_Emu::ignore_silence( bool b )     { ignore_silence_ = b; }\n  195: inline blargg_err_t Music_Emu::start_track_( int )  { return 0; }\n  196  \n  197  inline void Music_Emu::set_voice_names( const char* const* names )\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.cpp:\n  446  }\n  447  \n  448: blargg_err_t Nsf_Emu::start_track_( int track )\n  449  {\n  450: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  451  	\n  452  	memset( low_mem, 0, sizeof low_mem );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.h:\n   56  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   57  	blargg_err_t load_( Data_Reader& );\n   58: 	blargg_err_t start_track_( int );\n   59  	blargg_err_t run_clocks( blip_time_t&, int );\n   60  	void set_tempo_( double );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.cpp:\n  325  }\n  326  \n  327: blargg_err_t Nsfe_Emu::start_track_( int track )\n  328  {\n  329: 	return Nsf_Emu::start_track_( info.remap_track( track ) );\n  330  }\n  331  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.h:\n   58  	blargg_err_t load_( Data_Reader& );\n   59  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   60: 	blargg_err_t start_track_( int );\n   61  	void unload();\n   62  	void clear_playlist_();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.cpp:\n  324  }\n  325  \n  326: blargg_err_t Sap_Emu::start_track_( int track )\n  327  {\n  328: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  329  	\n  330  	memset( &mem, 0, sizeof mem );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.h:\n   33  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   34  	blargg_err_t load_mem_( byte const*, long );\n   35: 	blargg_err_t start_track_( int );\n   36  	blargg_err_t run_clocks( blip_time_t&, int );\n   37  	void set_tempo_( double );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.cpp:\n  278  void Spc_Emu::set_tempo_( double t ) { apu.set_tempo( t ); }\n  279  \n  280: blargg_err_t Spc_Emu::start_track_( int track )\n  281  {\n  282: 	RETURN_ERR( Music_Emu::start_track_( track ) );\n  283  	resampler.clear();\n  284  	RETURN_ERR( apu.load_spc( file_data, file_size ) );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.h:\n   61  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   62  	blargg_err_t set_sample_rate_( long );\n   63: 	blargg_err_t start_track_( int );\n   64  	blargg_err_t play_( long, sample_t* );\n   65  	blargg_err_t skip_( long );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Vgm_Emu.cpp:\n  362  // Emulation\n  363  \n  364: blargg_err_t Vgm_Emu::start_track_( int track )\n  365  {\n  366: 	RETURN_ERR( Classic_Emu::start_track_( track ) );\n  367  	psg.reset( get_le16( header().noise_feedback ), header().noise_width );\n  368  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Vgm_Emu.h:\n   64  	blargg_err_t load_mem_( byte const*, long );\n   65  	blargg_err_t set_sample_rate_( long sample_rate );\n   66: 	blargg_err_t start_track_( int );\n   67  	blargg_err_t play_( long count, sample_t* );\n   68  	blargg_err_t run_clocks( blip_time_t&, int );\n\n38 matches across 24 files\n\n\nSearching 132 files for \"load_spc\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Snes_Spc.cpp:\n   51  }\n   52  \n   53: blargg_err_t Snes_Spc::load_spc( const void* data, long size )\n   54  {\n   55  	struct spc_file_t {\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Snes_Spc.h:\n   14  	// Load copy of SPC data into emulator. Clear echo buffer if 'clear_echo' is true.\n   15  	enum { spc_file_size = 0x10180 };\n   16: 	blargg_err_t load_spc( const void* spc, long spc_size );\n   17  	\n   18  	// Generate 'count' samples and optionally write to 'buf'. Count must be even.\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.cpp:\n  282  	RETURN_ERR( Music_Emu::start_track_( track ) );\n  283  	resampler.clear();\n  284: 	RETURN_ERR( apu.load_spc( file_data, file_size ) );\n  285  	apu.clear_echo();\n  286  	return 0;\n\n3 matches across 3 files\n\n\nSearching 132 files for \"file_data\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n   33  	track_count_     = 0;\n   34  	raw_track_count_ = 0;\n   35: 	file_data.clear();\n   36  }\n   37  \n   ..\n   53  blargg_err_t Gme_File::load_mem_( byte const* data, long size )\n   54  {\n   55: 	require( data != file_data.begin() ); // load_mem_() or load_() must be overridden\n   56  	Mem_File_Reader in( data, size );\n   57  	return load_( in );\n   ..\n   60  blargg_err_t Gme_File::load_( Data_Reader& in )\n   61  {\n   62: 	RETURN_ERR( file_data.resize( in.remain() ) );\n   63: 	RETURN_ERR( in.read( file_data.begin(), file_data.size() ) );\n   64: 	return load_mem_( file_data.begin(), file_data.size() );\n   65  }\n   66  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n  106  	M3u_Playlist playlist;\n  107  	char playlist_warning [64];\n  108: 	blargg_vector<byte> file_data; // only if loaded into memory using default load\n  109  	\n  110  	blargg_err_t load_m3u_( blargg_err_t );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.cpp:\n   38  long const trailer_offset = 0x10200;\n   39  \n   40: byte const* Spc_Emu::trailer() const { return &file_data [min( file_size, trailer_offset )]; }\n   41  \n   42  long Spc_Emu::trailer_size() const { return max( 0L, file_size - trailer_offset ); }\n   ..\n  266  {\n  267  	assert( offsetof (header_t,unused2 [46]) == header_size );\n  268: 	file_data = in;\n  269  	file_size = size;\n  270  	set_voice_count( Snes_Spc::voice_count );\n  ...\n  282  	RETURN_ERR( Music_Emu::start_track_( track ) );\n  283  	resampler.clear();\n  284: 	RETURN_ERR( apu.load_spc( file_data, file_size ) );\n  285  	apu.clear_echo();\n  286  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.h:\n   39  	\n   40  	// Header for currently loaded file\n   41: 	header_t const& header() const { return *(header_t const*) file_data; }\n   42  	\n   43  	// Prevents channels and global volumes from being phase-negated\n   ..\n   67  	void set_tempo_( double );\n   68  private:\n   69: 	byte const* file_data;\n   70  	long        file_size;\n   71  	Fir_Resampler<24> resampler;\n\n13 matches across 4 files\n\n\nSearching 132 files for \"load_file\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/untitled.sublime-workspace:\n  390  			\"mute\",\n  391  			\"dprintf\",\n  392: 			\"load_file\",\n  393  			\"src.pro\",\n  394  			\"src.prp\",\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/design.txt:\n   61  emulators to be linked in. To avoid this, I make the list itself\n   62  editable in blargg_config.h. Having a built-in list allows\n   63: gme_load_file() to take a path and give back an emulator with the file\n   64  loaded, which is extremely useful for new users.\n   65  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/demo/cpp_basics.cpp:\n   29  	\n   30  	// Load music file into emulator\n   31: 	handle_error( emu->load_file( filename ) );\n   32  	\n   33  	// Start track\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/demo/features.c:\n   17  other custom format. In this example it's silly because we could just use\n   18  gme_load( &emu, sample_rate, path, 0 ).  */\n   19: Music_Emu* load_file( const char* path, long sample_rate )\n   20  {\n   21  	Music_Emu* emu;\n   ..\n   67  	\n   68  	/* Load file into emulator */\n   69: 	Music_Emu* emu = load_file( filename, sample_rate );\n   70  	print_warning( emu );\n   71  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/gme.cpp:\n  203  }\n  204  \n  205: gme_err_t gme_load_file( Music_Emu* me, const char* path ) { return me->load_file( path ); }\n  206  \n  207  gme_err_t gme_load_data( Music_Emu* me, void const* data, long size )\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/gme.h:\n  189  \n  190  /* Load music file into emulator */\n  191: gme_err_t gme_load_file( Music_Emu*, const char* path );\n  192  \n  193  /* Load music file from memory into emulator. Makes a copy of data passed. */\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n   97  }\n   98  \n   99: blargg_err_t Gme_File::load_file( const char* path )\n  100  {\n  101  	pre_load();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n   22  	\n   23  	// Load from file on disk\n   24: 	blargg_err_t load_file( const char* path );\n   25  	\n   26  	// Load from custom data source (see Data_Reader.h)\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.cpp:\n   69  }\n   70  \n   71: blargg_err_t Music_Player::load_file( const char* path )\n   72  {\n   73  	stop();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.h:\n   13  	\n   14  	// Load game music file. NULL on success, otherwise error string.\n   15: 	blargg_err_t load_file( const char* path );\n   16  	\n   17  	// (Re)start playing track. Tracks are numbered from 0 to track_count() - 1.\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/player.cpp:\n   85  	// Load file\n   86  	const char* path = (argc > 1 ? argv [argc - 1] : \"test.spc\");\n   87: 	handle_error( player->load_file( path ) );\n   88  	start_track( 1, path );\n   89  	\n\n13 matches across 11 files\n\n\nSearching 132 files for \"pre_load\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n   66  \n   67  // public load functions call this at beginning\n   68: void Gme_File::pre_load() { unload(); }\n   69  \n   70  void Gme_File::post_load_() { }\n   ..\n   87  blargg_err_t Gme_File::load_mem( void const* in, long size )\n   88  {\n   89: 	pre_load();\n   90  	return post_load( load_mem_( (byte const*) in, size ) );\n   91  }\n   ..\n   93  blargg_err_t Gme_File::load( Data_Reader& in )\n   94  {\n   95: 	pre_load();\n   96  	return post_load( load_( in ) );\n   97  }\n   ..\n   99  blargg_err_t Gme_File::load_file( const char* path )\n  100  {\n  101: 	pre_load();\n  102  	GME_FILE_READER in;\n  103  	RETURN_ERR( in.open( path ) );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n   87  	virtual blargg_err_t load_mem_( byte const* data, long size ); // use data in memory\n   88  	virtual blargg_err_t track_info_( track_info_t* out, int track ) const = 0;\n   89: 	virtual void pre_load();\n   90  	virtual void post_load_();\n   91  	virtual void clear_playlist_() { }\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n   84  }\n   85  \n   86: void Music_Emu::pre_load()\n   87  {\n   88  	require( sample_rate() ); // set_sample_rate() must be called before loading a file\n   89: 	Gme_File::pre_load();\n   90  }\n   91  \n   ..\n  402  \n  403  blargg_err_t Gme_Info_::set_sample_rate_( long )            { return 0; }\n  404: void         Gme_Info_::pre_load()                          { Gme_File::pre_load(); } // skip Music_Emu\n  405  void         Gme_Info_::post_load_()                        { Gme_File::post_load_(); } // skip Music_Emu\n  406  void         Gme_Info_::set_equalizer_( equalizer_t const& ){ check( false ); }\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.h:\n  120  protected:\n  121  	virtual void unload();\n  122: 	virtual void pre_load();\n  123  	virtual void post_load_();\n  124  private:\n  ...\n  174  	virtual blargg_err_t start_track_( int );\n  175  	virtual blargg_err_t play_( long count, sample_t* out );\n  176: 	virtual void pre_load();\n  177  	virtual void post_load_();\n  178  };\n\n11 matches across 4 files\n\n\nSearching 132 files for \"unload\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.cpp:\n   46  Gbs_Emu::~Gbs_Emu() { }\n   47  \n   48: void Gbs_Emu::unload()\n   49  {\n   50  	rom.clear();\n   51: 	Music_Emu::unload();\n   52  }\n   53  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.h:\n   57  	void set_voice( int, Blip_Buffer*, Blip_Buffer*, Blip_Buffer* );\n   58  	void update_eq( blip_eq_t const& );\n   59: 	void unload();\n   60  private:\n   61  	// rom\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n   28  }\n   29  \n   30: void Gme_File::unload()\n   31  {\n   32  	clear_playlist(); // *before* clearing track count\n   ..\n   41  	user_data_    = 0;\n   42  	user_cleanup_ = 0;\n   43: 	unload(); // clears fields\n   44  	blargg_verify_byte_order(); // used by most emulator types, so save them the trouble\n   45  }\n   ..\n   66  \n   67  // public load functions call this at beginning\n   68: void Gme_File::pre_load() { unload(); }\n   69  \n   70  void Gme_File::post_load_() { }\n   ..\n   78  		post_load_();\n   79  	else\n   80: 		unload();\n   81  	\n   82  	return err;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n   83  	\n   84  	// Overridable\n   85: 	virtual void unload();  // called before loading file and if loading fails\n   86  	virtual blargg_err_t load_( Data_Reader& ); // default loads then calls load_mem_()\n   87  	virtual blargg_err_t load_mem_( byte const* data, long size ); // use data in memory\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.cpp:\n   47  Hes_Emu::~Hes_Emu() { }\n   48  \n   49: void Hes_Emu::unload()\n   50  {\n   51  	rom.clear();\n   52: 	Music_Emu::unload();\n   53  }\n   54  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.h:\n   43  	void set_voice( int, Blip_Buffer*, Blip_Buffer*, Blip_Buffer* );\n   44  	void update_eq( blip_eq_t const& );\n   45: 	void unload();\n   46  public: private: friend class Hes_Cpu;\n   47  	byte* write_pages [page_count + 1]; // 0 if unmapped or I/O space\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.cpp:\n   42  }\n   43  \n   44: Kss_Emu::~Kss_Emu() { unload(); }\n   45  \n   46: void Kss_Emu::unload()\n   47  {\n   48  	delete sn;\n   49  	sn = 0;\n   50: 	Classic_Emu::unload();\n   51  }\n   52  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.h:\n   59  	void set_voice( int, Blip_Buffer*, Blip_Buffer*, Blip_Buffer* );\n   60  	void update_eq( blip_eq_t const& );\n   61: 	void unload();\n   62  private:\n   63  	Rom_Data<page_size> rom;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n   42  }\n   43  \n   44: void Music_Emu::unload()\n   45  {\n   46  	voice_count_ = 0;\n   47  	clear_track_vars();\n   48: 	Gme_File::unload();\n   49  }\n   50  \n   ..\n   70  	};\n   71  	set_voice_names( names );\n   72: 	Music_Emu::unload(); // non-virtual\n   73  }\n   74  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.h:\n  119  	virtual blargg_err_t skip_( long count );\n  120  protected:\n  121: 	virtual void unload();\n  122  	virtual void pre_load();\n  123  	virtual void post_load_();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.cpp:\n   54  }\n   55  \n   56: Nsf_Emu::~Nsf_Emu() { unload(); }\n   57  \n   58: void Nsf_Emu::unload()\n   59  {\n   60  	#if !NSF_EMU_APU_ONLY\n   ..\n   72  	\n   73  	rom.clear();\n   74: 	Music_Emu::unload();\n   75  }\n   76  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.h:\n   61  	void set_voice( int, Blip_Buffer*, Blip_Buffer*, Blip_Buffer* );\n   62  	void update_eq( blip_eq_t const& );\n   63: 	void unload();\n   64  protected:\n   65  	enum { bank_count = 8 };\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.cpp:\n   24  Nsfe_Info::~Nsfe_Info() { }\n   25  \n   26: inline void Nsfe_Info::unload()\n   27  {\n   28  	track_name_data.clear();\n   ..\n  263  Nsfe_Emu::~Nsfe_Emu() { }\n  264  \n  265: void Nsfe_Emu::unload()\n  266  {\n  267  	if ( !loading )\n  268: 		info.unload(); // TODO: extremely hacky!\n  269: 	Nsf_Emu::unload();\n  270  }\n  271  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.h:\n   27  	int remap_track( int i ) const;\n   28  	\n   29: 	void unload();\n   30  	\n   31  	Nsfe_Info();\n   ..\n   59  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   60  	blargg_err_t start_track_( int );\n   61: 	void unload();\n   62  	void clear_playlist_();\n   63  private:\n\n29 matches across 14 files\n\n\nSearching 132 files for \"GME_FILE_READER\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/gme.cpp:\n  101  	{\n  102  		char header [4];\n  103: 		GME_FILE_READER in;\n  104  		RETURN_ERR( in.open( path ) );\n  105  		RETURN_ERR( in.read( header, sizeof header ) );\n  ...\n  138  	*out = 0;\n  139  	\n  140: 	GME_FILE_READER in;\n  141  	RETURN_ERR( in.open( path ) );\n  142  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n  100  {\n  101  	pre_load();\n  102: 	GME_FILE_READER in;\n  103  	RETURN_ERR( in.open( path ) );\n  104  	return post_load( load_( in ) );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n  122  	{ Gme_File::copy_field_( out->name, in.name, sizeof in.name ); }\n  123  \n  124: #ifndef GME_FILE_READER\n  125  	#ifdef HAVE_ZLIB_H\n  126: 		#define GME_FILE_READER Gzip_File_Reader\n  127  	#else\n  128: 		#define GME_FILE_READER Std_File_Reader\n  129  	#endif\n  130: #elif defined (GME_FILE_READER_INCLUDE)\n  131: 	#include GME_FILE_READER_INCLUDE\n  132  #endif\n  133  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/M3u_Playlist.cpp:\n  414  blargg_err_t M3u_Playlist::load( const char* path )\n  415  {\n  416: 	GME_FILE_READER in;\n  417  	RETURN_ERR( in.open( path ) );\n  418  	return load( in );\n\n9 matches across 4 files\n\n\nSearching 132 files for \"Std_File_Reader\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme.txt:\n  282  performance reasons, use Remaining_Reader:\n  283  \n  284: 	Std_File_Reader in;\n  285  	error = in.open( file_path );\n  286  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Data_Reader.cpp:\n  186  }\n  187  \n  188: // Std_File_Reader\n  189  \n  190: Std_File_Reader::Std_File_Reader() : file_( 0 ) { }\n  191  \n  192: Std_File_Reader::~Std_File_Reader() { close(); }\n  193  \n  194: blargg_err_t Std_File_Reader::open( const char* path )\n  195  {\n  196  	file_ = fopen( path, \"rb\" );\n  ...\n  200  }\n  201  \n  202: long Std_File_Reader::size() const\n  203  {\n  204  	long pos = tell();\n  ...\n  209  }\n  210  \n  211: long Std_File_Reader::read_avail( void* p, long s )\n  212  {\n  213  	return fread( p, 1, s, (FILE*) file_ );\n  214  }\n  215  \n  216: blargg_err_t Std_File_Reader::read( void* p, long s )\n  217  {\n  218  	if ( s == (long) fread( p, 1, s, (FILE*) file_ ) )\n  ...\n  223  }\n  224  \n  225: long Std_File_Reader::tell() const { return ftell( (FILE*) file_ ); }\n  226  \n  227: blargg_err_t Std_File_Reader::seek( long n )\n  228  {\n  229  	if ( !fseek( (FILE*) file_, n, SEEK_SET ) )\n  ...\n  234  }\n  235  \n  236: void Std_File_Reader::close()\n  237  {\n  238  	if ( file_ )\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Data_Reader.h:\n   52  \n   53  // Disk file reader\n   54: class Std_File_Reader : public File_Reader {\n   55  public:\n   56  	blargg_err_t open( const char* path );\n   ..\n   58  	\n   59  public:\n   60: 	Std_File_Reader();\n   61: 	~Std_File_Reader();\n   62  	long size() const;\n   63  	blargg_err_t read( void*, long );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n  126  		#define GME_FILE_READER Gzip_File_Reader\n  127  	#else\n  128: 		#define GME_FILE_READER Std_File_Reader\n  129  	#endif\n  130  #elif defined (GME_FILE_READER_INCLUDE)\n\n17 matches across 4 files\n\n\nSearching 132 files for \"load_\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/Summary Notes.txt:\n   15  library object with the new operator.\n   16  \n   17: * Load from a block of memory rather than a file with gme_load_data()\n   18  \n   19  When loading a music file in the wrong emulator or trying to load a\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/untitled.sublime-workspace:\n  390  			\"mute\",\n  391  			\"dprintf\",\n  392: 			\"load_file\",\n  393  			\"src.pro\",\n  394  			\"src.prp\",\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/changes.txt:\n   43  and fourth lookups, though I don't know whether it matters\n   44  \n   45: - Added Music_Emu::load_mem() to use music data already in memory\n   46  (without copying it)\n   47  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/design.txt:\n   21  combining a block of memory with a Data_Reader to the remaining data.\n   22  This makes the library much more flexible with regard to the source of\n   23: game music file data. I still added a specialized load_mem() function to\n   24  have the emulator keep a pointer to data already read in memory, for\n   25  those formats whose files can be absolutely huge (GYM, some VGMs). This\n   ..\n   61  emulators to be linked in. To avoid this, I make the list itself\n   62  editable in blargg_config.h. Having a built-in list allows\n   63: gme_load_file() to take a path and give back an emulator with the file\n   64  loaded, which is extremely useful for new users.\n   65  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme.txt:\n   46  gme_identify_*()\n   47  * Load just the file's information tags with gme_info_only\n   48: * Load from a block of memory rather than a file with gme_load_data()\n   49  * Arrange for a fade-out at a particular time with gme_set_fade\n   50  * Find when a track has ended with gme_track_ended()\n   51  * Seek to a new time in the track with gme_seek()\n   52: * Load an extended m3u playlist with gme_load_m3u()\n   53  * Get a list of the voices (channels) and mute them individually with\n   54  gme_voice_names() and gme_mute_voice()\n   ..\n  161  --------------------\n  162  The library supports playlists in an extended m3u format with\n  163: gme_load_m3u() to give track names and times to multi-song formats: AY,\n  164  GBS, HES, KSS, NSF, NSFE, and SAP. Some aspects of the file format\n  165  itself is not well-defined so some m3u files won't work properly\n  ...\n  260  * From a block of memory:\n  261  \n  262: 	error = gme_load_data( emu, pointer, size );\n  263  \n  264  * Have library call your function to read data:\n  ...\n  270  	}\n  271  	\n  272: 	error = gme_load_custom( emu, my_read, file_size, my_data );\n  273  \n  274  * If you must load the file data into memory yourself, you can have the\n  ...\n  276  you must not free the data until you're done playing the file.\n  277  \n  278: 	error = emu->load_mem( pointer, size );\n  279  \n  280  * If you've already read the first bytes of a file (perhaps to determine\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/demo/cpp_basics.cpp:\n   29  	\n   30  	// Load music file into emulator\n   31: 	handle_error( emu->load_file( filename ) );\n   32  	\n   33  	// Start track\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/demo/features.c:\n   17  other custom format. In this example it's silly because we could just use\n   18  gme_load( &emu, sample_rate, path, 0 ).  */\n   19: Music_Emu* load_file( const char* path, long sample_rate )\n   20  {\n   21  	Music_Emu* emu;\n   ..\n   67  	\n   68  	/* Load file into emulator */\n   69: 	Music_Emu* emu = load_file( filename, sample_rate );\n   70  	print_warning( emu );\n   71  	\n   ..\n   76  	/* Load .m3u playlist file. All tracks are assumed to use current file.\n   77  	We ignore error here in case there is no m3u file present. */\n   78: 	gme_load_m3u( emu, playlist );\n   79  	print_warning( emu );\n   80  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Cpu.cpp:\n   26  \n   27  #define SYNC_TIME()     (void) (s.time = s_time)\n   28: #define RELOAD_TIME()   (void) (s_time = s.time)\n   29  \n   30  // Callbacks to emulator\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Emu.cpp:\n  100  	Ay_File() { set_type( gme_ay_type ); }\n  101  	\n  102: 	blargg_err_t load_mem_( byte const* begin, long size )\n  103  	{\n  104  		RETURN_ERR( parse_header( begin, size, &file ) );\n  ...\n  121  // Setup\n  122  \n  123: blargg_err_t Ay_Emu::load_mem_( byte const* in, long size )\n  124  {\n  125  	assert( offsetof (header_t,track_info [2]) == header_size );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Emu.h:\n   38  protected:\n   39  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   40: 	blargg_err_t load_mem_( byte const*, long );\n   41  	blargg_err_t start_track_( int );\n   42  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Classic_Emu.cpp:\n  121  // Rom_Data\n  122  \n  123: blargg_err_t Rom_Data_::load_rom_data_( Data_Reader& in,\n  124  		int header_size, void* header_out, int fill, long pad_size )\n  125  {\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Classic_Emu.h:\n   62  	blargg_long size_; // TODO: eliminate\n   63  	\n   64: 	blargg_err_t load_rom_data_( Data_Reader& in, int header_size, void* header_out,\n   65  			int fill, long pad_size );\n   66  	void set_addr_( long addr, int unit );\n   ..\n   75  	blargg_err_t load( Data_Reader& in, int header_size, void* header_out, int fill )\n   76  	{\n   77: 		return load_rom_data_( in, header_size, header_out, fill, pad_size );\n   78  	}\n   79  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.cpp:\n   80  	Gbs_File() { set_type( gme_gbs_type ); }\n   81  	\n   82: 	blargg_err_t load_( Data_Reader& in )\n   83  	{\n   84  		blargg_err_t err = in.read( &h, Gbs_Emu::header_size );\n   ..\n  104  // Setup\n  105  \n  106: blargg_err_t Gbs_Emu::load_( Data_Reader& in )\n  107  {\n  108  	assert( offsetof (header_t,copyright [32]) == header_size );\n  ...\n  118  		set_warning( \"Invalid timer mode\" );\n  119  	\n  120: 	unsigned load_addr = get_le16( header_.load_addr );\n  121: 	if ( (header_.load_addr [1] | header_.init_addr [1] | header_.play_addr [1]) > 0x7F ||\n  122: 			load_addr < 0x400 )\n  123  		set_warning( \"Invalid load/init/play address\" );\n  124  	\n  ...\n  214  	cpu::reset( rom.unmapped() );\n  215  	\n  216: 	unsigned load_addr = get_le16( header_.load_addr );\n  217: 	cpu::rst_base = load_addr;\n  218: 	rom.set_addr( load_addr );\n  219  	\n  220  	cpu::map_code( ram_addr, 0x10000 - ram_addr, ram );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.h:\n   24  		byte track_count;\n   25  		byte first_track;\n   26: 		byte load_addr [2];\n   27  		byte init_addr [2];\n   28  		byte play_addr [2];\n   ..\n   44  	Music_Emu::load;\n   45  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   46: 			{ return load_remaining_( &h, sizeof h, in ); }\n   47  \n   48  public:\n   ..\n   51  protected:\n   52  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   53: 	blargg_err_t load_( Data_Reader& );\n   54  	blargg_err_t start_track_( int );\n   55  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/gme.cpp:\n  123  	CHECK_ALLOC( emu );\n  124  	\n  125: 	gme_err_t err = gme_load_data( emu, data, size );\n  126  	\n  127  	if ( err )\n  ...\n  203  }\n  204  \n  205: gme_err_t gme_load_file( Music_Emu* me, const char* path ) { return me->load_file( path ); }\n  206  \n  207: gme_err_t gme_load_data( Music_Emu* me, void const* data, long size )\n  208  {\n  209  	Mem_File_Reader in( data, size );\n  ...\n  211  }\n  212  \n  213: gme_err_t gme_load_custom( Music_Emu* me, gme_reader_t func, long size, void* data )\n  214  {\n  215  	Callback_Reader in( func, size, data );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/gme.h:\n   61  \n   62  /* Load m3u playlist file (must be done after loading music) */\n   63: gme_err_t gme_load_m3u( Music_Emu*, const char* path );\n   64  \n   65  /* Clear any loaded m3u playlist and any internal playlist that the music format\n   ..\n  189  \n  190  /* Load music file into emulator */\n  191: gme_err_t gme_load_file( Music_Emu*, const char* path );\n  192  \n  193  /* Load music file from memory into emulator. Makes a copy of data passed. */\n  194: gme_err_t gme_load_data( Music_Emu*, void const* data, long size );\n  195  \n  196  /* Load music file using custom data reader function that will be called to\n  197  read file data. Most emulators load the entire file in one read call. */\n  198  typedef gme_err_t (*gme_reader_t)( void* your_data, void* out, long count );\n  199: gme_err_t gme_load_custom( Music_Emu*, gme_reader_t, long file_size, void* your_data );\n  200  \n  201  /* Load m3u playlist file from memory (must be done after loading music) */\n  202: gme_err_t gme_load_m3u_data( Music_Emu*, void const* data, long size );\n  203  \n  204  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n   51  }\n   52  \n   53: blargg_err_t Gme_File::load_mem_( byte const* data, long size )\n   54  {\n   55: 	require( data != file_data.begin() ); // load_mem_() or load_() must be overridden\n   56  	Mem_File_Reader in( data, size );\n   57: 	return load_( in );\n   58  }\n   59  \n   60: blargg_err_t Gme_File::load_( Data_Reader& in )\n   61  {\n   62  	RETURN_ERR( file_data.resize( in.remain() ) );\n   63  	RETURN_ERR( in.read( file_data.begin(), file_data.size() ) );\n   64: 	return load_mem_( file_data.begin(), file_data.size() );\n   65  }\n   66  \n   ..\n   68  void Gme_File::pre_load() { unload(); }\n   69  \n   70: void Gme_File::post_load_() { }\n   71  \n   72  // public load functions call this at end\n   ..\n   76  		set_track_count( type()->track_count );\n   77  	if ( !err )\n   78: 		post_load_();\n   79  	else\n   80  		unload();\n   ..\n   85  // Public load functions\n   86  \n   87: blargg_err_t Gme_File::load_mem( void const* in, long size )\n   88  {\n   89  	pre_load();\n   90: 	return post_load( load_mem_( (byte const*) in, size ) );\n   91  }\n   92  \n   ..\n   94  {\n   95  	pre_load();\n   96: 	return post_load( load_( in ) );\n   97  }\n   98  \n   99: blargg_err_t Gme_File::load_file( const char* path )\n  100  {\n  101  	pre_load();\n  102  	GME_FILE_READER in;\n  103  	RETURN_ERR( in.open( path ) );\n  104: 	return post_load( load_( in ) );\n  105  }\n  106  \n  107: blargg_err_t Gme_File::load_remaining_( void const* h, long s, Data_Reader& in )\n  108  {\n  109  	Remaining_Reader rem( h, s, &in );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n   22  	\n   23  	// Load from file on disk\n   24: 	blargg_err_t load_file( const char* path );\n   25  	\n   26  	// Load from custom data source (see Data_Reader.h)\n   ..\n   29  	// Load from file already read into memory. Keeps pointer to data, so you\n   30  	// must not free it until you're done with the file.\n   31: 	blargg_err_t load_mem( void const* data, long size );\n   32  	\n   33  	// Load an m3u playlist. Must be done after loading main music file.\n   34: 	blargg_err_t load_m3u( const char* path );\n   35: 	blargg_err_t load_m3u( Data_Reader& in );\n   36  	\n   37  	// Clears any loaded m3u playlist and any internal playlist that the music\n   ..\n   80  	void set_warning( const char* s )   { warning_ = s; }\n   81  	void set_type( gme_type_t t )       { type_ = t; }\n   82: 	blargg_err_t load_remaining_( void const* header, long header_size, Data_Reader& remaining );\n   83  	\n   84  	// Overridable\n   85  	virtual void unload();  // called before loading file and if loading fails\n   86: 	virtual blargg_err_t load_( Data_Reader& ); // default loads then calls load_mem_()\n   87: 	virtual blargg_err_t load_mem_( byte const* data, long size ); // use data in memory\n   88  	virtual blargg_err_t track_info_( track_info_t* out, int track ) const = 0;\n   89  	virtual void pre_load();\n   90: 	virtual void post_load_();\n   91  	virtual void clear_playlist_() { }\n   92  	\n   ..\n  108  	blargg_vector<byte> file_data; // only if loaded into memory using default load\n  109  	\n  110: 	blargg_err_t load_m3u_( blargg_err_t );\n  111  	blargg_err_t post_load( blargg_err_t err );\n  112  public:\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gym_Emu.cpp:\n  143  	Gym_File() { set_type( gme_gym_type ); }\n  144  	\n  145: 	blargg_err_t load_mem_( byte const* in, long size )\n  146  	{\n  147  		file_begin = in;\n  ...\n  208  }\n  209  \n  210: blargg_err_t Gym_Emu::load_mem_( byte const* in, long size )\n  211  {\n  212  	assert( offsetof (header_t,packed [4]) == header_size );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gym_Emu.h:\n   37  	Music_Emu::load;\n   38  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   39: 			{ return load_remaining_( &h, sizeof h, in ); }\n   40  	enum { gym_rate = 60 }; \n   41  	long track_length() const; // use track_info()\n   ..\n   45  	~Gym_Emu();\n   46  protected:\n   47: 	blargg_err_t load_mem_( byte const*, long );\n   48  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   49  	blargg_err_t set_sample_rate_( long sample_rate );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.cpp:\n  114  	Hes_File() { set_type( gme_hes_type ); }\n  115  	\n  116: 	blargg_err_t load_( Data_Reader& in )\n  117  	{\n  118  		assert( offsetof (header_t,fields) == Hes_Emu::header_size + 0x20 );\n  ...\n  137  // Setup\n  138  \n  139: blargg_err_t Hes_Emu::load_( Data_Reader& in )\n  140  {\n  141  	assert( offsetof (header_t,unused [4]) == header_size );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.h:\n   37  protected:\n   38  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   39: 	blargg_err_t load_( Data_Reader& );\n   40  	blargg_err_t start_track_( int );\n   41  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Cpu.cpp:\n   26  \n   27  #define SYNC_TIME()     (void) (s.time = s_time)\n   28: #define RELOAD_TIME()   (void) (s_time = s.time)\n   29  \n   30  // Callbacks to emulator\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.cpp:\n   84  	Kss_File() { set_type( gme_kss_type ); }\n   85  	\n   86: 	blargg_err_t load_( Data_Reader& in )\n   87  	{\n   88  		blargg_err_t err = in.read( &header_, Kss_Emu::header_size );\n   ..\n  117  }\n  118  \n  119: blargg_err_t Kss_Emu::load_( Data_Reader& in )\n  120  {\n  121  	memset( &header_, 0, sizeof header_ );\n  ...\n  210  	\n  211  	// copy non-banked data into RAM\n  212: 	unsigned load_addr = get_le16( header_.load_addr );\n  213: 	long orig_load_size = get_le16( header_.load_size );\n  214: 	long load_size = min( orig_load_size, rom.file_size() );\n  215: 	load_size = min( load_size, long (mem_size - load_addr) );\n  216: 	if ( load_size != orig_load_size )\n  217  		set_warning( \"Excessive data size\" );\n  218: 	memcpy( ram + load_addr, rom.begin() + header_.extra_header, load_size );\n  219  	\n  220: 	rom.set_addr( -load_size - header_.extra_header );\n  221  	\n  222  	// check available bank data\n  223  	blargg_long const bank_size = this->bank_size();\n  224: 	int max_banks = (rom.file_size() - load_size + bank_size - 1) / bank_size;\n  225  	bank_count = header_.bank_mode & 0x7F;\n  226  	if ( bank_count > max_banks )\n  ...\n  229  		set_warning( \"Bank data missing\" );\n  230  	}\n  231: 	//ddprintf( \"load_size : $%X\\n\", load_size );\n  232  	//ddprintf( \"bank_size : $%X\\n\", bank_size );\n  233  	//ddprintf( \"bank_count: %d (%d claimed)\\n\", bank_count, header_.bank_mode & 0x7F );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.h:\n   19  	{\n   20  		byte tag [4];\n   21: 		byte load_addr [2];\n   22: 		byte load_size [2];\n   23  		byte init_addr [2];\n   24  		byte play_addr [2];\n   ..\n   53  protected:\n   54  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   55: 	blargg_err_t load_( Data_Reader& );\n   56  	blargg_err_t start_track_( int );\n   57  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/M3u_Playlist.cpp:\n   21  // gme functions defined here to avoid linking in m3u code unless it's used\n   22  \n   23: blargg_err_t Gme_File::load_m3u_( blargg_err_t err )\n   24  {\n   25  	require( raw_track_count_ ); // file must be loaded first\n   ..\n   49  }\n   50  \n   51: blargg_err_t Gme_File::load_m3u( const char* path ) { return load_m3u_( playlist.load( path ) ); }\n   52  \n   53: blargg_err_t Gme_File::load_m3u( Data_Reader& in )  { return load_m3u_( playlist.load( in ) ); }\n   54  \n   55: gme_err_t gme_load_m3u( Music_Emu* me, const char* path ) { return me->load_m3u( path ); }\n   56  \n   57: gme_err_t gme_load_m3u_data( Music_Emu* me, const void* data, long size )\n   58  {\n   59  	Mem_File_Reader in( data, size );\n   60: 	return me->load_m3u( in );\n   61  }\n   62  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n  124  }\n  125  \n  126: void Music_Emu::post_load_()\n  127  {\n  128  	set_tempo( tempo_ );\n  ...\n  403  blargg_err_t Gme_Info_::set_sample_rate_( long )            { return 0; }\n  404  void         Gme_Info_::pre_load()                          { Gme_File::pre_load(); } // skip Music_Emu\n  405: void         Gme_Info_::post_load_()                        { Gme_File::post_load_(); } // skip Music_Emu\n  406  void         Gme_Info_::set_equalizer_( equalizer_t const& ){ check( false ); }\n  407  void         Gme_Info_::mute_voices_( int )                 { check( false ); }\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.h:\n  121  	virtual void unload();\n  122  	virtual void pre_load();\n  123: 	virtual void post_load_();\n  124  private:\n  125  	// general\n  ...\n  175  	virtual blargg_err_t play_( long count, sample_t* out );\n  176  	virtual void pre_load();\n  177: 	virtual void post_load_();\n  178  };\n  179  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Apu.h:\n   56  	// Save/load exact emulation state\n   57  	void save_state( apu_state_t* out ) const;\n   58: 	void load_state( apu_state_t const& );\n   59  	\n   60  	// Set overall volume (default is 1.0)\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Fme7_Apu.h:\n   28  	void end_frame( blip_time_t );\n   29  	void save_state( fme7_apu_state_t* ) const;\n   30: 	void load_state( fme7_apu_state_t const& );\n   31  	\n   32  	// Mask and addresses of registers\n   ..\n  122  }\n  123  \n  124: inline void Nes_Fme7_Apu::load_state( fme7_apu_state_t const& in )\n  125  {\n  126  	reset();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Namco_Apu.h:\n   32  	// to do: implement save/restore\n   33  	void save_state( namco_state_t* out ) const;\n   34: 	void load_state( namco_state_t const& );\n   35  	\n   36  public:\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Oscs.cpp:\n  327  };\n  328  \n  329: inline void Nes_Dmc::reload_sample()\n  330  {\n  331  	address = 0x4000 + regs [2] * 0x40;\n  ...\n  369  void Nes_Dmc::start()\n  370  {\n  371: 	reload_sample();\n  372  	fill_buffer();\n  373  	recalc_irq();\n  ...\n  385  		{\n  386  			if ( regs [0] & loop_flag ) {\n  387: 				reload_sample();\n  388  			}\n  389  			else {\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Oscs.h:\n  139  	void recalc_irq();\n  140  	void fill_buffer();\n  141: 	void reload_sample();\n  142  	void reset();\n  143  	int count_reads( nes_time_t, nes_time_t* ) const;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Vrc6_Apu.cpp:\n   86  }\n   87  \n   88: void Nes_Vrc6_Apu::load_state( vrc6_apu_state_t const& in )\n   89  {\n   90  	reset();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Vrc6_Apu.h:\n   21  	void end_frame( blip_time_t );\n   22  	void save_state( vrc6_apu_state_t* ) const;\n   23: 	void load_state( vrc6_apu_state_t const& );\n   24  	\n   25  	// Oscillator 0 write-only registers are at $9000-$9002\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.cpp:\n  105  	Nsf_File() { set_type( gme_nsf_type ); }\n  106  	\n  107: 	blargg_err_t load_( Data_Reader& in )\n  108  	{\n  109  		blargg_err_t err = in.read( &h, Nsf_Emu::header_size );\n  ...\n  265  }\n  266  \n  267: blargg_err_t Nsf_Emu::load_( Data_Reader& in )\n  268  {\n  269  	assert( offsetof (header_t,unused [4]) == header_size );\n  ...\n  282  	\n  283  	// set up data\n  284: 	nes_addr_t load_addr = get_le16( header_.load_addr );\n  285  	init_addr = get_le16( header_.init_addr );\n  286  	play_addr = get_le16( header_.play_addr );\n  287: 	if ( !load_addr ) load_addr = rom_begin;\n  288  	if ( !init_addr ) init_addr = rom_begin;\n  289  	if ( !play_addr ) play_addr = rom_begin;\n  290: 	if ( load_addr < rom_begin || init_addr < rom_begin )\n  291  	{\n  292  		const char* w = warning();\n  ...\n  296  	}\n  297  	\n  298: 	rom.set_addr( load_addr % bank_size );\n  299  	int total_banks = rom.size() / bank_size;\n  300  	\n  301  	// bank switching\n  302: 	int first_bank = (load_addr - rom_begin) / bank_size;\n  303  	for ( int i = 0; i < bank_count; i++ )\n  304  	{\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.h:\n   24  		byte track_count;\n   25  		byte first_track;\n   26: 		byte load_addr [2];\n   27  		byte init_addr [2];\n   28  		byte play_addr [2];\n   ..\n   47  	Music_Emu::load;\n   48  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   49: 			{ return load_remaining_( &h, sizeof h, in ); }\n   50  \n   51  public:\n   ..\n   55  protected:\n   56  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   57: 	blargg_err_t load_( Data_Reader& );\n   58  	blargg_err_t start_track_( int );\n   59  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.cpp:\n   80  struct nsfe_info_t\n   81  {\n   82: 	byte load_addr [2];\n   83  	byte init_addr [2];\n   84  	byte play_addr [2];\n   ..\n  158  				this->actual_track_count_ = finfo.track_count;\n  159  				info.first_track = finfo.first_track;\n  160: 				memcpy( info.load_addr, finfo.load_addr, 2 * 3 );\n  161  				break;\n  162  			}\n  ...\n  281  	Nsfe_File() { set_type( gme_nsfe_type ); }\n  282  	\n  283: 	blargg_err_t load_( Data_Reader& in )\n  284  	{\n  285  		RETURN_ERR( info.load( in, 0 ) );\n  ...\n  300  gme_type_t_ const gme_nsfe_type [1] = { \"Nintendo NES\", 0, &new_nsfe_emu, &new_nsfe_file, \"NSFE\", 1 };\n  301  \n  302: blargg_err_t Nsfe_Emu::load_( Data_Reader& in )\n  303  {\n  304  	if ( loading )\n  305: 		return Nsf_Emu::load_( in );\n  306  	\n  307  	// TODO: this hacky recursion-avoidance could have subtle problems\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.h:\n   49  	Music_Emu::load;\n   50  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   51: 			{ return load_remaining_( &h, sizeof h, in ); }\n   52  	void disable_playlist( bool = true ); // use clear_playlist()\n   53  \n   ..\n   56  	~Nsfe_Emu();\n   57  protected:\n   58: 	blargg_err_t load_( Data_Reader& );\n   59  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   60  	blargg_err_t start_track_( int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.cpp:\n  219  	Sap_File() { set_type( gme_sap_type ); }\n  220  	\n  221: 	blargg_err_t load_mem_( byte const* begin, long size )\n  222  	{\n  223  		RETURN_ERR( parse_info( begin, size, &info ) );\n  ...\n  240  // Setup\n  241  \n  242: blargg_err_t Sap_Emu::load_mem_( byte const* in, long size )\n  243  {\n  244  	file_end = in + size;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.h:\n   32  protected:\n   33  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   34: 	blargg_err_t load_mem_( byte const*, long );\n   35  	blargg_err_t start_track_( int );\n   36  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Snes_Spc.cpp:\n   51  }\n   52  \n   53: blargg_err_t Snes_Spc::load_spc( const void* data, long size )\n   54  {\n   55  	struct spc_file_t {\n   ..\n   88  		set_ipl_rom( spc->ipl_rom );\n   89  	\n   90: 	const char* error = load_state( regs, spc->ram, spc->dsp );\n   91  	\n   92  	echo_accessed = false;\n   ..\n  107  // Handle other file formats (emulator save states) in user code, not here.\n  108  \n  109: blargg_err_t Snes_Spc::load_state( const registers_t& cpu_state, const void* new_ram,\n  110  		const void* dsp_state )\n  111  {\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Snes_Spc.h:\n   14  	// Load copy of SPC data into emulator. Clear echo buffer if 'clear_echo' is true.\n   15  	enum { spc_file_size = 0x10180 };\n   16: 	blargg_err_t load_spc( const void* spc, long spc_size );\n   17  	\n   18  	// Generate 'count' samples and optionally write to 'buf'. Count must be even.\n   ..\n   25  	// Load copy of state into emulator.\n   26  	typedef Spc_Cpu::registers_t registers_t;\n   27: 	blargg_err_t load_state( const registers_t& cpu_state, const void* ram_64k,\n   28  		const void* dsp_regs_128 );\n   29  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.cpp:\n  214  	Spc_File() { set_type( gme_spc_type ); }\n  215  	\n  216: 	blargg_err_t load_( Data_Reader& in )\n  217  	{\n  218  		long file_size = in.remain();\n  ...\n  263  }\n  264  \n  265: blargg_err_t Spc_Emu::load_mem_( byte const* in, long size )\n  266  {\n  267  	assert( offsetof (header_t,unused2 [46]) == header_size );\n  ...\n  282  	RETURN_ERR( Music_Emu::start_track_( track ) );\n  283  	resampler.clear();\n  284: 	RETURN_ERR( apu.load_spc( file_data, file_size ) );\n  285  	apu.clear_echo();\n  286  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.h:\n   50  	Music_Emu::load;\n   51  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   52: 			{ return load_remaining_( &h, sizeof h, in ); }\n   53  	byte const* trailer() const; // use track_info()\n   54  	long trailer_size() const;\n   ..\n   58  	~Spc_Emu();\n   59  protected:\n   60: 	blargg_err_t load_mem_( byte const*, long );\n   61  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   62  	blargg_err_t set_sample_rate_( long );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Vgm_Emu.cpp:\n  166  	Vgm_File() { set_type( gme_vgm_type ); }\n  167  	\n  168: 	blargg_err_t load_( Data_Reader& in )\n  169  	{\n  170  		long file_size = in.remain();\n  ...\n  268  }\n  269  \n  270: blargg_err_t Vgm_Emu::load_mem_( byte const* new_data, long new_size )\n  271  {\n  272  	assert( offsetof (header_t,unused2 [8]) == header_size );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Vgm_Emu.h:\n   54  	Music_Emu::load;\n   55  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   56: 			{ return load_remaining_( &h, sizeof h, in ); }\n   57  	byte const* gd3_data( int* size_out = 0 ) const; // use track_info()\n   58  \n   ..\n   62  protected:\n   63  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   64: 	blargg_err_t load_mem_( byte const*, long );\n   65  	blargg_err_t set_sample_rate_( long sample_rate );\n   66  	blargg_err_t start_track_( int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.cpp:\n   69  }\n   70  \n   71: blargg_err_t Music_Player::load_file( const char* path )\n   72  {\n   73  	stop();\n   ..\n   82  		p = m3u_path + strlen( m3u_path );\n   83  	strcpy( p, \".m3u\" );\n   84: 	if ( emu_->load_m3u( m3u_path ) ) { } // ignore error*/\n   85  	\n   86  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.h:\n   13  	\n   14  	// Load game music file. NULL on success, otherwise error string.\n   15: 	blargg_err_t load_file( const char* path );\n   16  	\n   17  	// (Re)start playing track. Tracks are numbered from 0 to track_count() - 1.\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/player.cpp:\n   85  	// Load file\n   86  	const char* path = (argc > 1 ? argv [argc - 1] : \"test.spc\");\n   87: 	handle_error( player->load_file( path ) );\n   88  	start_track( 1, path );\n   89  	\n\n164 matches across 50 files\n\n\nSearching 132 files for \"load_\"\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/Summary Notes.txt:\n   15  library object with the new operator.\n   16  \n   17: * Load from a block of memory rather than a file with gme_load_data()\n   18  \n   19  When loading a music file in the wrong emulator or trying to load a\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/untitled.sublime-workspace:\n  390  			\"mute\",\n  391  			\"dprintf\",\n  392: 			\"load_file\",\n  393  			\"src.pro\",\n  394  			\"src.prp\",\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/changes.txt:\n   43  and fourth lookups, though I don't know whether it matters\n   44  \n   45: - Added Music_Emu::load_mem() to use music data already in memory\n   46  (without copying it)\n   47  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/design.txt:\n   21  combining a block of memory with a Data_Reader to the remaining data.\n   22  This makes the library much more flexible with regard to the source of\n   23: game music file data. I still added a specialized load_mem() function to\n   24  have the emulator keep a pointer to data already read in memory, for\n   25  those formats whose files can be absolutely huge (GYM, some VGMs). This\n   ..\n   61  emulators to be linked in. To avoid this, I make the list itself\n   62  editable in blargg_config.h. Having a built-in list allows\n   63: gme_load_file() to take a path and give back an emulator with the file\n   64  loaded, which is extremely useful for new users.\n   65  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme.txt:\n   46  gme_identify_*()\n   47  * Load just the file's information tags with gme_info_only\n   48: * Load from a block of memory rather than a file with gme_load_data()\n   49  * Arrange for a fade-out at a particular time with gme_set_fade\n   50  * Find when a track has ended with gme_track_ended()\n   51  * Seek to a new time in the track with gme_seek()\n   52: * Load an extended m3u playlist with gme_load_m3u()\n   53  * Get a list of the voices (channels) and mute them individually with\n   54  gme_voice_names() and gme_mute_voice()\n   ..\n  161  --------------------\n  162  The library supports playlists in an extended m3u format with\n  163: gme_load_m3u() to give track names and times to multi-song formats: AY,\n  164  GBS, HES, KSS, NSF, NSFE, and SAP. Some aspects of the file format\n  165  itself is not well-defined so some m3u files won't work properly\n  ...\n  260  * From a block of memory:\n  261  \n  262: 	error = gme_load_data( emu, pointer, size );\n  263  \n  264  * Have library call your function to read data:\n  ...\n  270  	}\n  271  	\n  272: 	error = gme_load_custom( emu, my_read, file_size, my_data );\n  273  \n  274  * If you must load the file data into memory yourself, you can have the\n  ...\n  276  you must not free the data until you're done playing the file.\n  277  \n  278: 	error = emu->load_mem( pointer, size );\n  279  \n  280  * If you've already read the first bytes of a file (perhaps to determine\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/demo/cpp_basics.cpp:\n   29  	\n   30  	// Load music file into emulator\n   31: 	handle_error( emu->load_file( filename ) );\n   32  	\n   33  	// Start track\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/demo/features.c:\n   17  other custom format. In this example it's silly because we could just use\n   18  gme_load( &emu, sample_rate, path, 0 ).  */\n   19: Music_Emu* load_file( const char* path, long sample_rate )\n   20  {\n   21  	Music_Emu* emu;\n   ..\n   67  	\n   68  	/* Load file into emulator */\n   69: 	Music_Emu* emu = load_file( filename, sample_rate );\n   70  	print_warning( emu );\n   71  	\n   ..\n   76  	/* Load .m3u playlist file. All tracks are assumed to use current file.\n   77  	We ignore error here in case there is no m3u file present. */\n   78: 	gme_load_m3u( emu, playlist );\n   79  	print_warning( emu );\n   80  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Cpu.cpp:\n   26  \n   27  #define SYNC_TIME()     (void) (s.time = s_time)\n   28: #define RELOAD_TIME()   (void) (s_time = s.time)\n   29  \n   30  // Callbacks to emulator\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Emu.cpp:\n  100  	Ay_File() { set_type( gme_ay_type ); }\n  101  	\n  102: 	blargg_err_t load_mem_( byte const* begin, long size )\n  103  	{\n  104  		RETURN_ERR( parse_header( begin, size, &file ) );\n  ...\n  121  // Setup\n  122  \n  123: blargg_err_t Ay_Emu::load_mem_( byte const* in, long size )\n  124  {\n  125  	assert( offsetof (header_t,track_info [2]) == header_size );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Ay_Emu.h:\n   38  protected:\n   39  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   40: 	blargg_err_t load_mem_( byte const*, long );\n   41  	blargg_err_t start_track_( int );\n   42  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Classic_Emu.cpp:\n  121  // Rom_Data\n  122  \n  123: blargg_err_t Rom_Data_::load_rom_data_( Data_Reader& in,\n  124  		int header_size, void* header_out, int fill, long pad_size )\n  125  {\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Classic_Emu.h:\n   62  	blargg_long size_; // TODO: eliminate\n   63  	\n   64: 	blargg_err_t load_rom_data_( Data_Reader& in, int header_size, void* header_out,\n   65  			int fill, long pad_size );\n   66  	void set_addr_( long addr, int unit );\n   ..\n   75  	blargg_err_t load( Data_Reader& in, int header_size, void* header_out, int fill )\n   76  	{\n   77: 		return load_rom_data_( in, header_size, header_out, fill, pad_size );\n   78  	}\n   79  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.cpp:\n   80  	Gbs_File() { set_type( gme_gbs_type ); }\n   81  	\n   82: 	blargg_err_t load_( Data_Reader& in )\n   83  	{\n   84  		blargg_err_t err = in.read( &h, Gbs_Emu::header_size );\n   ..\n  104  // Setup\n  105  \n  106: blargg_err_t Gbs_Emu::load_( Data_Reader& in )\n  107  {\n  108  	assert( offsetof (header_t,copyright [32]) == header_size );\n  ...\n  118  		set_warning( \"Invalid timer mode\" );\n  119  	\n  120: 	unsigned load_addr = get_le16( header_.load_addr );\n  121: 	if ( (header_.load_addr [1] | header_.init_addr [1] | header_.play_addr [1]) > 0x7F ||\n  122: 			load_addr < 0x400 )\n  123  		set_warning( \"Invalid load/init/play address\" );\n  124  	\n  ...\n  214  	cpu::reset( rom.unmapped() );\n  215  	\n  216: 	unsigned load_addr = get_le16( header_.load_addr );\n  217: 	cpu::rst_base = load_addr;\n  218: 	rom.set_addr( load_addr );\n  219  	\n  220  	cpu::map_code( ram_addr, 0x10000 - ram_addr, ram );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gbs_Emu.h:\n   24  		byte track_count;\n   25  		byte first_track;\n   26: 		byte load_addr [2];\n   27  		byte init_addr [2];\n   28  		byte play_addr [2];\n   ..\n   44  	Music_Emu::load;\n   45  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   46: 			{ return load_remaining_( &h, sizeof h, in ); }\n   47  \n   48  public:\n   ..\n   51  protected:\n   52  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   53: 	blargg_err_t load_( Data_Reader& );\n   54  	blargg_err_t start_track_( int );\n   55  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/gme.cpp:\n  123  	CHECK_ALLOC( emu );\n  124  	\n  125: 	gme_err_t err = gme_load_data( emu, data, size );\n  126  	\n  127  	if ( err )\n  ...\n  203  }\n  204  \n  205: gme_err_t gme_load_file( Music_Emu* me, const char* path ) { return me->load_file( path ); }\n  206  \n  207: gme_err_t gme_load_data( Music_Emu* me, void const* data, long size )\n  208  {\n  209  	Mem_File_Reader in( data, size );\n  ...\n  211  }\n  212  \n  213: gme_err_t gme_load_custom( Music_Emu* me, gme_reader_t func, long size, void* data )\n  214  {\n  215  	Callback_Reader in( func, size, data );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/gme.h:\n   61  \n   62  /* Load m3u playlist file (must be done after loading music) */\n   63: gme_err_t gme_load_m3u( Music_Emu*, const char* path );\n   64  \n   65  /* Clear any loaded m3u playlist and any internal playlist that the music format\n   ..\n  189  \n  190  /* Load music file into emulator */\n  191: gme_err_t gme_load_file( Music_Emu*, const char* path );\n  192  \n  193  /* Load music file from memory into emulator. Makes a copy of data passed. */\n  194: gme_err_t gme_load_data( Music_Emu*, void const* data, long size );\n  195  \n  196  /* Load music file using custom data reader function that will be called to\n  197  read file data. Most emulators load the entire file in one read call. */\n  198  typedef gme_err_t (*gme_reader_t)( void* your_data, void* out, long count );\n  199: gme_err_t gme_load_custom( Music_Emu*, gme_reader_t, long file_size, void* your_data );\n  200  \n  201  /* Load m3u playlist file from memory (must be done after loading music) */\n  202: gme_err_t gme_load_m3u_data( Music_Emu*, void const* data, long size );\n  203  \n  204  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.cpp:\n   51  }\n   52  \n   53: blargg_err_t Gme_File::load_mem_( byte const* data, long size )\n   54  {\n   55: 	require( data != file_data.begin() ); // load_mem_() or load_() must be overridden\n   56  	Mem_File_Reader in( data, size );\n   57: 	return load_( in );\n   58  }\n   59  \n   60: blargg_err_t Gme_File::load_( Data_Reader& in )\n   61  {\n   62  	RETURN_ERR( file_data.resize( in.remain() ) );\n   63  	RETURN_ERR( in.read( file_data.begin(), file_data.size() ) );\n   64: 	return load_mem_( file_data.begin(), file_data.size() );\n   65  }\n   66  \n   ..\n   68  void Gme_File::pre_load() { unload(); }\n   69  \n   70: void Gme_File::post_load_() { }\n   71  \n   72  // public load functions call this at end\n   ..\n   76  		set_track_count( type()->track_count );\n   77  	if ( !err )\n   78: 		post_load_();\n   79  	else\n   80  		unload();\n   ..\n   85  // Public load functions\n   86  \n   87: blargg_err_t Gme_File::load_mem( void const* in, long size )\n   88  {\n   89  	pre_load();\n   90: 	return post_load( load_mem_( (byte const*) in, size ) );\n   91  }\n   92  \n   ..\n   94  {\n   95  	pre_load();\n   96: 	return post_load( load_( in ) );\n   97  }\n   98  \n   99: blargg_err_t Gme_File::load_file( const char* path )\n  100  {\n  101  	pre_load();\n  102  	GME_FILE_READER in;\n  103  	RETURN_ERR( in.open( path ) );\n  104: 	return post_load( load_( in ) );\n  105  }\n  106  \n  107: blargg_err_t Gme_File::load_remaining_( void const* h, long s, Data_Reader& in )\n  108  {\n  109  	Remaining_Reader rem( h, s, &in );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gme_File.h:\n   22  	\n   23  	// Load from file on disk\n   24: 	blargg_err_t load_file( const char* path );\n   25  	\n   26  	// Load from custom data source (see Data_Reader.h)\n   ..\n   29  	// Load from file already read into memory. Keeps pointer to data, so you\n   30  	// must not free it until you're done with the file.\n   31: 	blargg_err_t load_mem( void const* data, long size );\n   32  	\n   33  	// Load an m3u playlist. Must be done after loading main music file.\n   34: 	blargg_err_t load_m3u( const char* path );\n   35: 	blargg_err_t load_m3u( Data_Reader& in );\n   36  	\n   37  	// Clears any loaded m3u playlist and any internal playlist that the music\n   ..\n   80  	void set_warning( const char* s )   { warning_ = s; }\n   81  	void set_type( gme_type_t t )       { type_ = t; }\n   82: 	blargg_err_t load_remaining_( void const* header, long header_size, Data_Reader& remaining );\n   83  	\n   84  	// Overridable\n   85  	virtual void unload();  // called before loading file and if loading fails\n   86: 	virtual blargg_err_t load_( Data_Reader& ); // default loads then calls load_mem_()\n   87: 	virtual blargg_err_t load_mem_( byte const* data, long size ); // use data in memory\n   88  	virtual blargg_err_t track_info_( track_info_t* out, int track ) const = 0;\n   89  	virtual void pre_load();\n   90: 	virtual void post_load_();\n   91  	virtual void clear_playlist_() { }\n   92  	\n   ..\n  108  	blargg_vector<byte> file_data; // only if loaded into memory using default load\n  109  	\n  110: 	blargg_err_t load_m3u_( blargg_err_t );\n  111  	blargg_err_t post_load( blargg_err_t err );\n  112  public:\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gym_Emu.cpp:\n  143  	Gym_File() { set_type( gme_gym_type ); }\n  144  	\n  145: 	blargg_err_t load_mem_( byte const* in, long size )\n  146  	{\n  147  		file_begin = in;\n  ...\n  208  }\n  209  \n  210: blargg_err_t Gym_Emu::load_mem_( byte const* in, long size )\n  211  {\n  212  	assert( offsetof (header_t,packed [4]) == header_size );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Gym_Emu.h:\n   37  	Music_Emu::load;\n   38  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   39: 			{ return load_remaining_( &h, sizeof h, in ); }\n   40  	enum { gym_rate = 60 }; \n   41  	long track_length() const; // use track_info()\n   ..\n   45  	~Gym_Emu();\n   46  protected:\n   47: 	blargg_err_t load_mem_( byte const*, long );\n   48  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   49  	blargg_err_t set_sample_rate_( long sample_rate );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.cpp:\n  114  	Hes_File() { set_type( gme_hes_type ); }\n  115  	\n  116: 	blargg_err_t load_( Data_Reader& in )\n  117  	{\n  118  		assert( offsetof (header_t,fields) == Hes_Emu::header_size + 0x20 );\n  ...\n  137  // Setup\n  138  \n  139: blargg_err_t Hes_Emu::load_( Data_Reader& in )\n  140  {\n  141  	assert( offsetof (header_t,unused [4]) == header_size );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Hes_Emu.h:\n   37  protected:\n   38  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   39: 	blargg_err_t load_( Data_Reader& );\n   40  	blargg_err_t start_track_( int );\n   41  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Cpu.cpp:\n   26  \n   27  #define SYNC_TIME()     (void) (s.time = s_time)\n   28: #define RELOAD_TIME()   (void) (s_time = s.time)\n   29  \n   30  // Callbacks to emulator\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.cpp:\n   84  	Kss_File() { set_type( gme_kss_type ); }\n   85  	\n   86: 	blargg_err_t load_( Data_Reader& in )\n   87  	{\n   88  		blargg_err_t err = in.read( &header_, Kss_Emu::header_size );\n   ..\n  117  }\n  118  \n  119: blargg_err_t Kss_Emu::load_( Data_Reader& in )\n  120  {\n  121  	memset( &header_, 0, sizeof header_ );\n  ...\n  210  	\n  211  	// copy non-banked data into RAM\n  212: 	unsigned load_addr = get_le16( header_.load_addr );\n  213: 	long orig_load_size = get_le16( header_.load_size );\n  214: 	long load_size = min( orig_load_size, rom.file_size() );\n  215: 	load_size = min( load_size, long (mem_size - load_addr) );\n  216: 	if ( load_size != orig_load_size )\n  217  		set_warning( \"Excessive data size\" );\n  218: 	memcpy( ram + load_addr, rom.begin() + header_.extra_header, load_size );\n  219  	\n  220: 	rom.set_addr( -load_size - header_.extra_header );\n  221  	\n  222  	// check available bank data\n  223  	blargg_long const bank_size = this->bank_size();\n  224: 	int max_banks = (rom.file_size() - load_size + bank_size - 1) / bank_size;\n  225  	bank_count = header_.bank_mode & 0x7F;\n  226  	if ( bank_count > max_banks )\n  ...\n  229  		set_warning( \"Bank data missing\" );\n  230  	}\n  231: 	//ddprintf( \"load_size : $%X\\n\", load_size );\n  232  	//ddprintf( \"bank_size : $%X\\n\", bank_size );\n  233  	//ddprintf( \"bank_count: %d (%d claimed)\\n\", bank_count, header_.bank_mode & 0x7F );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Kss_Emu.h:\n   19  	{\n   20  		byte tag [4];\n   21: 		byte load_addr [2];\n   22: 		byte load_size [2];\n   23  		byte init_addr [2];\n   24  		byte play_addr [2];\n   ..\n   53  protected:\n   54  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   55: 	blargg_err_t load_( Data_Reader& );\n   56  	blargg_err_t start_track_( int );\n   57  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/M3u_Playlist.cpp:\n   21  // gme functions defined here to avoid linking in m3u code unless it's used\n   22  \n   23: blargg_err_t Gme_File::load_m3u_( blargg_err_t err )\n   24  {\n   25  	require( raw_track_count_ ); // file must be loaded first\n   ..\n   49  }\n   50  \n   51: blargg_err_t Gme_File::load_m3u( const char* path ) { return load_m3u_( playlist.load( path ) ); }\n   52  \n   53: blargg_err_t Gme_File::load_m3u( Data_Reader& in )  { return load_m3u_( playlist.load( in ) ); }\n   54  \n   55: gme_err_t gme_load_m3u( Music_Emu* me, const char* path ) { return me->load_m3u( path ); }\n   56  \n   57: gme_err_t gme_load_m3u_data( Music_Emu* me, const void* data, long size )\n   58  {\n   59  	Mem_File_Reader in( data, size );\n   60: 	return me->load_m3u( in );\n   61  }\n   62  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp:\n  124  }\n  125  \n  126: void Music_Emu::post_load_()\n  127  {\n  128  	set_tempo( tempo_ );\n  ...\n  403  blargg_err_t Gme_Info_::set_sample_rate_( long )            { return 0; }\n  404  void         Gme_Info_::pre_load()                          { Gme_File::pre_load(); } // skip Music_Emu\n  405: void         Gme_Info_::post_load_()                        { Gme_File::post_load_(); } // skip Music_Emu\n  406  void         Gme_Info_::set_equalizer_( equalizer_t const& ){ check( false ); }\n  407  void         Gme_Info_::mute_voices_( int )                 { check( false ); }\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.h:\n  121  	virtual void unload();\n  122  	virtual void pre_load();\n  123: 	virtual void post_load_();\n  124  private:\n  125  	// general\n  ...\n  175  	virtual blargg_err_t play_( long count, sample_t* out );\n  176  	virtual void pre_load();\n  177: 	virtual void post_load_();\n  178  };\n  179  \n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Apu.h:\n   56  	// Save/load exact emulation state\n   57  	void save_state( apu_state_t* out ) const;\n   58: 	void load_state( apu_state_t const& );\n   59  	\n   60  	// Set overall volume (default is 1.0)\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Fme7_Apu.h:\n   28  	void end_frame( blip_time_t );\n   29  	void save_state( fme7_apu_state_t* ) const;\n   30: 	void load_state( fme7_apu_state_t const& );\n   31  	\n   32  	// Mask and addresses of registers\n   ..\n  122  }\n  123  \n  124: inline void Nes_Fme7_Apu::load_state( fme7_apu_state_t const& in )\n  125  {\n  126  	reset();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Namco_Apu.h:\n   32  	// to do: implement save/restore\n   33  	void save_state( namco_state_t* out ) const;\n   34: 	void load_state( namco_state_t const& );\n   35  	\n   36  public:\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Oscs.cpp:\n  327  };\n  328  \n  329: inline void Nes_Dmc::reload_sample()\n  330  {\n  331  	address = 0x4000 + regs [2] * 0x40;\n  ...\n  369  void Nes_Dmc::start()\n  370  {\n  371: 	reload_sample();\n  372  	fill_buffer();\n  373  	recalc_irq();\n  ...\n  385  		{\n  386  			if ( regs [0] & loop_flag ) {\n  387: 				reload_sample();\n  388  			}\n  389  			else {\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Oscs.h:\n  139  	void recalc_irq();\n  140  	void fill_buffer();\n  141: 	void reload_sample();\n  142  	void reset();\n  143  	int count_reads( nes_time_t, nes_time_t* ) const;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Vrc6_Apu.cpp:\n   86  }\n   87  \n   88: void Nes_Vrc6_Apu::load_state( vrc6_apu_state_t const& in )\n   89  {\n   90  	reset();\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nes_Vrc6_Apu.h:\n   21  	void end_frame( blip_time_t );\n   22  	void save_state( vrc6_apu_state_t* ) const;\n   23: 	void load_state( vrc6_apu_state_t const& );\n   24  	\n   25  	// Oscillator 0 write-only registers are at $9000-$9002\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.cpp:\n  105  	Nsf_File() { set_type( gme_nsf_type ); }\n  106  	\n  107: 	blargg_err_t load_( Data_Reader& in )\n  108  	{\n  109  		blargg_err_t err = in.read( &h, Nsf_Emu::header_size );\n  ...\n  265  }\n  266  \n  267: blargg_err_t Nsf_Emu::load_( Data_Reader& in )\n  268  {\n  269  	assert( offsetof (header_t,unused [4]) == header_size );\n  ...\n  282  	\n  283  	// set up data\n  284: 	nes_addr_t load_addr = get_le16( header_.load_addr );\n  285  	init_addr = get_le16( header_.init_addr );\n  286  	play_addr = get_le16( header_.play_addr );\n  287: 	if ( !load_addr ) load_addr = rom_begin;\n  288  	if ( !init_addr ) init_addr = rom_begin;\n  289  	if ( !play_addr ) play_addr = rom_begin;\n  290: 	if ( load_addr < rom_begin || init_addr < rom_begin )\n  291  	{\n  292  		const char* w = warning();\n  ...\n  296  	}\n  297  	\n  298: 	rom.set_addr( load_addr % bank_size );\n  299  	int total_banks = rom.size() / bank_size;\n  300  	\n  301  	// bank switching\n  302: 	int first_bank = (load_addr - rom_begin) / bank_size;\n  303  	for ( int i = 0; i < bank_count; i++ )\n  304  	{\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsf_Emu.h:\n   24  		byte track_count;\n   25  		byte first_track;\n   26: 		byte load_addr [2];\n   27  		byte init_addr [2];\n   28  		byte play_addr [2];\n   ..\n   47  	Music_Emu::load;\n   48  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   49: 			{ return load_remaining_( &h, sizeof h, in ); }\n   50  \n   51  public:\n   ..\n   55  protected:\n   56  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   57: 	blargg_err_t load_( Data_Reader& );\n   58  	blargg_err_t start_track_( int );\n   59  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.cpp:\n   80  struct nsfe_info_t\n   81  {\n   82: 	byte load_addr [2];\n   83  	byte init_addr [2];\n   84  	byte play_addr [2];\n   ..\n  158  				this->actual_track_count_ = finfo.track_count;\n  159  				info.first_track = finfo.first_track;\n  160: 				memcpy( info.load_addr, finfo.load_addr, 2 * 3 );\n  161  				break;\n  162  			}\n  ...\n  281  	Nsfe_File() { set_type( gme_nsfe_type ); }\n  282  	\n  283: 	blargg_err_t load_( Data_Reader& in )\n  284  	{\n  285  		RETURN_ERR( info.load( in, 0 ) );\n  ...\n  300  gme_type_t_ const gme_nsfe_type [1] = { \"Nintendo NES\", 0, &new_nsfe_emu, &new_nsfe_file, \"NSFE\", 1 };\n  301  \n  302: blargg_err_t Nsfe_Emu::load_( Data_Reader& in )\n  303  {\n  304  	if ( loading )\n  305: 		return Nsf_Emu::load_( in );\n  306  	\n  307  	// TODO: this hacky recursion-avoidance could have subtle problems\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Nsfe_Emu.h:\n   49  	Music_Emu::load;\n   50  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   51: 			{ return load_remaining_( &h, sizeof h, in ); }\n   52  	void disable_playlist( bool = true ); // use clear_playlist()\n   53  \n   ..\n   56  	~Nsfe_Emu();\n   57  protected:\n   58: 	blargg_err_t load_( Data_Reader& );\n   59  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   60  	blargg_err_t start_track_( int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.cpp:\n  219  	Sap_File() { set_type( gme_sap_type ); }\n  220  	\n  221: 	blargg_err_t load_mem_( byte const* begin, long size )\n  222  	{\n  223  		RETURN_ERR( parse_info( begin, size, &info ) );\n  ...\n  240  // Setup\n  241  \n  242: blargg_err_t Sap_Emu::load_mem_( byte const* in, long size )\n  243  {\n  244  	file_end = in + size;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Sap_Emu.h:\n   32  protected:\n   33  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   34: 	blargg_err_t load_mem_( byte const*, long );\n   35  	blargg_err_t start_track_( int );\n   36  	blargg_err_t run_clocks( blip_time_t&, int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Snes_Spc.cpp:\n   51  }\n   52  \n   53: blargg_err_t Snes_Spc::load_spc( const void* data, long size )\n   54  {\n   55  	struct spc_file_t {\n   ..\n   88  		set_ipl_rom( spc->ipl_rom );\n   89  	\n   90: 	const char* error = load_state( regs, spc->ram, spc->dsp );\n   91  	\n   92  	echo_accessed = false;\n   ..\n  107  // Handle other file formats (emulator save states) in user code, not here.\n  108  \n  109: blargg_err_t Snes_Spc::load_state( const registers_t& cpu_state, const void* new_ram,\n  110  		const void* dsp_state )\n  111  {\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Snes_Spc.h:\n   14  	// Load copy of SPC data into emulator. Clear echo buffer if 'clear_echo' is true.\n   15  	enum { spc_file_size = 0x10180 };\n   16: 	blargg_err_t load_spc( const void* spc, long spc_size );\n   17  	\n   18  	// Generate 'count' samples and optionally write to 'buf'. Count must be even.\n   ..\n   25  	// Load copy of state into emulator.\n   26  	typedef Spc_Cpu::registers_t registers_t;\n   27: 	blargg_err_t load_state( const registers_t& cpu_state, const void* ram_64k,\n   28  		const void* dsp_regs_128 );\n   29  	\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.cpp:\n  214  	Spc_File() { set_type( gme_spc_type ); }\n  215  	\n  216: 	blargg_err_t load_( Data_Reader& in )\n  217  	{\n  218  		long file_size = in.remain();\n  ...\n  263  }\n  264  \n  265: blargg_err_t Spc_Emu::load_mem_( byte const* in, long size )\n  266  {\n  267  	assert( offsetof (header_t,unused2 [46]) == header_size );\n  ...\n  282  	RETURN_ERR( Music_Emu::start_track_( track ) );\n  283  	resampler.clear();\n  284: 	RETURN_ERR( apu.load_spc( file_data, file_size ) );\n  285  	apu.clear_echo();\n  286  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Spc_Emu.h:\n   50  	Music_Emu::load;\n   51  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   52: 			{ return load_remaining_( &h, sizeof h, in ); }\n   53  	byte const* trailer() const; // use track_info()\n   54  	long trailer_size() const;\n   ..\n   58  	~Spc_Emu();\n   59  protected:\n   60: 	blargg_err_t load_mem_( byte const*, long );\n   61  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   62  	blargg_err_t set_sample_rate_( long );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Vgm_Emu.cpp:\n  166  	Vgm_File() { set_type( gme_vgm_type ); }\n  167  	\n  168: 	blargg_err_t load_( Data_Reader& in )\n  169  	{\n  170  		long file_size = in.remain();\n  ...\n  268  }\n  269  \n  270: blargg_err_t Vgm_Emu::load_mem_( byte const* new_data, long new_size )\n  271  {\n  272  	assert( offsetof (header_t,unused2 [8]) == header_size );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Vgm_Emu.h:\n   54  	Music_Emu::load;\n   55  	blargg_err_t load( header_t const& h, Data_Reader& in ) // use Remaining_Reader\n   56: 			{ return load_remaining_( &h, sizeof h, in ); }\n   57  	byte const* gd3_data( int* size_out = 0 ) const; // use track_info()\n   58  \n   ..\n   62  protected:\n   63  	blargg_err_t track_info_( track_info_t*, int track ) const;\n   64: 	blargg_err_t load_mem_( byte const*, long );\n   65  	blargg_err_t set_sample_rate_( long sample_rate );\n   66  	blargg_err_t start_track_( int );\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.cpp:\n   69  }\n   70  \n   71: blargg_err_t Music_Player::load_file( const char* path )\n   72  {\n   73  	stop();\n   ..\n   82  		p = m3u_path + strlen( m3u_path );\n   83  	strcpy( p, \".m3u\" );\n   84: 	if ( emu_->load_m3u( m3u_path ) ) { } // ignore error*/\n   85  	\n   86  	return 0;\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/Music_Player.h:\n   13  	\n   14  	// Load game music file. NULL on success, otherwise error string.\n   15: 	blargg_err_t load_file( const char* path );\n   16  	\n   17  	// (Re)start playing track. Tracks are numbered from 0 to track_count() - 1.\n\n/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/player.cpp:\n   85  	// Load file\n   86  	const char* path = (argc > 1 ? argv [argc - 1] : \"test.spc\");\n   87: 	handle_error( player->load_file( path ) );\n   88  	start_track( 1, path );\n   89  	\n\n164 matches across 50 files\n",
			"settings":
			{
				"buffer_size": 123198,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "PC-side/gme.txt",
			"settings":
			{
				"buffer_size": 18453,
				"line_ending": "Windows"
			}
		},
		{
			"file": "PC-side/gme/Data_Reader.h",
			"settings":
			{
				"buffer_size": 3445,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/Data_Reader.cpp",
			"settings":
			{
				"buffer_size": 6439,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/Gme_File.h",
			"settings":
			{
				"buffer_size": 4584,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/Gme_File.cpp",
			"settings":
			{
				"buffer_size": 5261,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/Snes_Spc.h",
			"settings":
			{
				"buffer_size": 3180,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/Snes_Spc.cpp",
			"settings":
			{
				"buffer_size": 12050,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/Spc_Emu.h",
			"settings":
			{
				"buffer_size": 1959,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/Spc_Emu.cpp",
			"settings":
			{
				"buffer_size": 8229,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/blargg_source.h",
			"settings":
			{
				"buffer_size": 2434,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/gme.h",
			"settings":
			{
				"buffer_size": 7865,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/gme.cpp",
			"settings":
			{
				"buffer_size": 7676,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/gme/Music_Emu.h",
			"settings":
			{
				"buffer_size": 7179,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/player/player.cpp",
			"settings":
			{
				"buffer_size": 4597,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/player/Audio_Scope.h",
			"settings":
			{
				"buffer_size": 778,
				"line_ending": "Unix"
			}
		},
		{
			"file": "PC-side/player/Audio_Scope.cpp",
			"settings":
			{
				"buffer_size": 4826,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/pic_compile.sublime-build",
	"command_palette":
	{
		"height": 67.0,
		"selected_items":
		[
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: t",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/gme/Music_Emu.cpp",
		"/Users/bazz/Projects/SNES-Tracker/PC_Tracker/PlaySample/PC-side/player/player.cpp",
		"/Users/bazz/Desktop/botb/dlALLBoTBUser.sh",
		"/Users/bazz/Projects/website/README.md",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/js/jquery.fitvids.js",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/_includes/head.html",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/css/main.scss",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/_includes/header.html",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/_config.yml",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/_layouts/default.html",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/carousel.css",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/index.html",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/js/youtube.js",
		"/Users/bazz/Projects/jekyll-bootstrap-theme-fork/_includes/footer.html",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Ay_Apu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Ay_Cpu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Ay_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/blargg_source.h",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Classic_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Gb_Apu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/gb_cpu_io.h",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Gbs_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Hes_Apu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Hes_Cpu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/hes_cpu_io.h",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Hes_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Kss_Cpu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Kss_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Multi_Buffer.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Music_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Nes_Apu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Nes_Cpu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/nes_cpu_io.h",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Nes_Fme7_Apu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Nes_Fme7_Apu.h",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Nsf_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Nsfe_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Sap_Apu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Sap_Cpu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/sap_cpu_io.h",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Sap_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Snes_Spc.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Spc_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Vgm_Emu.cpp",
		"/Users/bazz/Downloads/Game_Music_Emu-0.5.2/gme/Vgm_Emu_Impl.cpp",
		"/Users/bazz/Projects/SNES-Tracker/PC_Tracker/readme.txt",
		"/Users/bazz/.MacOSX/environment.plist",
		"/Users/bazz/xchataqua/Pods/Pods.xcconfig",
		"/Users/bazz/Desktop/porting_zsnes/SDL-1.2.15/src/video/maccommon/SDL_mackeys.h",
		"/Users/bazz/Desktop/porting_zsnes/zsnes-1.36/src/dos/dosintrf.asm",
		"/Users/bazz/Desktop/porting_zsnes/zsnes-1.36/src/video/procvid.asm",
		"/Users/bazz/Downloads/zsnes-1.36/src/linux/ChangesBAZZ",
		"/Users/bazz/Desktop/trip_planning/thurs/notes.txt",
		"/Users/bazz/Desktop/iamsoinlove.txt",
		"/Users/bazz/Dropbox/Hacking/Solaris.Sparc/heap_analysis/www.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/su/su.dfl",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/fs/nfs/nfs3_vfsops.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/fs/fifofs/fifosubr.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/fs/doorfs/door_vnops.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/fs/cachefs/cachefs_vfsops.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/fs/cachefs/cachefs_module.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/sys/pctypes.h",
		"/mnt/life/home/bazz/namefs/expose.c",
		"/Users/bazz/Desktop/doors.sublime-project",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/sys/mutex.h",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/sun/sys/pr_impl_util.h",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/last/last.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/w/w.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/tty/tty.c",
		"/Users/bazz/Desktop/Solaris_2.8/+160",
		"/Users/bazz/Desktop/Solaris_2.8/+364",
		"/Users/bazz/Desktop/Solaris_2.8/+128",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/syscall/mount.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/realmode/dos/inc/common/sys/vnode.h",
		"/Users/bazz/Desktop/Solaris_2.8/+106",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/ucbhead/sys/vfs.h",
		"/Users/bazz/Desktop/Solaris_2.8/+169",
		"/Users/bazz/Desktop/Solaris_2.8/+151",
		"/Users/bazz/Desktop/Solaris_2.8/+111",
		"/Users/bazz/Desktop/Solaris_2.8/+72",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/sun4d/ml/genassym.c",
		"/Users/bazz/Desktop/Solaris_2.8/+1018",
		"/Users/bazz/Desktop/Solaris_2.8/+62",
		"/Users/bazz/Desktop/Solaris_2.8/+756",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/syscall/sysfs.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/fs/doorfs/door_sys.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/sys/door_data.h",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/sys/door.h",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/intel/ia32/os/syscall.c",
		"/Users/bazz/Desktop/Solaris_2.8/+125",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/fs.d/autofs/mount.c",
		"/Users/bazz/Desktop/Solaris_2.8/+421",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/fs.d/cachefs/mount/mount.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/sparc/syscall/getcontext.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/sparc/syscall/lwp_private.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/lib/libc/sparcv9/sys/mount.s",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/fs/mntfs/mntvfsops.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/uts/common/syscall/symlink.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/ucbcmd/ps/ps.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/whodo/whodo.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/utmp_update/utmp_update.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/xargs/xargs.c",
		"/Users/bazz/hack_apply/logs/date.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/write/write.c",
		"/Users/bazz/hack_apply/fakestackframe/passwd.c",
		"/Users/bazz/hack_apply/fakestackframe/pty_execve_exploit_blade60.c",
		"/Users/bazz/hack_apply/fakestackframe/pty_execve_exploit_blade60_archived.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/cmd-inet/usr.bin/rcp.c",
		"/Users/bazz/Desktop/Solaris_2.8/osnet_volume/usr/src/cmd/cron/crontab.c",
		"/mnt/life/home/bazz/latest/apply-1.2-libc/apply.c",
		"/Users/bazz/Reusable Code/args.c",
		"/Users/bazz/Dropbox/Hacking/Solaris.Sparc/trap_analysis/auto_exploit/auto.c",
		"/private/var/folders/_g/8ck0kqk51z38kgfh807mc1cc0000gn/T/fz3temp-1/note_to_admin.txt",
		"/Users/bazz/Hacking/cmdline_apps/bigmomma",
		"/Users/bazz/Hacking/cmdline_apps/hacking/loader.c",
		"/Users/bazz/.vimrc",
		"/mnt/Blade72/nobackup/blade71/bazz/public_html/learn/school/carduino/home.php",
		"/mnt/Blade72/nobackup/blade74_sd0g/bazz/tmp/xor_test.S",
		"/Users/bazz/Dropbox/sparc_yotube_post.txt",
		"/mnt/Blade72/nobackup/blade74_sd0g/bazz/tmp/notes.txt",
		"/mnt/Blade72/nobackup/blade74_sd0g/bazz/tmp/a.c",
		"/mnt/Blade72/nobackup/blade74_sd0g/bazz/tmp/alternating_payload2.c",
		"/Users/bazz/Dropbox/Hacking/phrack/dl.sh",
		"/Users/bazz/.ssh/config",
		"/Users/bazz/.work",
		"/private/tmp/growl_final_test/Release/rakefile",
		"/Users/bazz/growl/Release/Plugins/System/GrowlAction/xcconfig/Common.xcconfig",
		"/Users/bazz/growl/Plugins/System/GrowlAction/xcconfig/Common.xcconfig"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"play",
			"fill_buff",
			"sound_start",
			"custom",
			"load_",
			"Std_File_Reader",
			"GME_FILE_READER",
			"unload",
			"pre_load",
			"load_file",
			"file_data",
			"load_spc",
			"start_track_",
			"remap_track_",
			"clear_track_vars",
			"#define RETURN_ERR",
			"RETURN_ERR",
			"init",
			"relative",
			"ddprintf",
			"set_tempo",
			"tempo",
			"Gme_File",
			"Callback_Reader",
			"Effects_Buffer",
			"enable",
			"ignore",
			"enabled",
			"ENABLED",
			"enabled",
			"mute",
			"mute_voices_",
			"mute",
			"ignore",
			"ignore_silence",
			"mute",
			"dprintf",
			"load_file",
			"src.pro",
			"src.prp",
			"mmsystem",
			"Application",
			"main",
			"easeInOutExpo",
			"page-scroll",
			"about",
			"superC",
			"x =",
			"show",
			"FireSpark",
			"100",
			"dx",
			"dy",
			"resetspark",
			"mouse",
			"gif",
			"1.36.001",
			"1.36",
			"0x29",
			"Code Alignment",
			"GUIGUIAboutText6e",
			"BAZZ'S",
			"Alignment",
			"LINUX VERSION",
			"%else",
			"DEBUG",
			"ifdef DEBUG",
			"ifdef __DEBUG",
			"Code Alignment",
			"3Bh",
			"guipresstestb",
			"AllKeys",
			"scancodelisting",
			"scancode",
			"0x7a",
			"7ah",
			"0x0a",
			"NEWSYM pressed",
			"pressed",
			"scancodelist",
			"scancode",
			"1bh",
			"0x0d",
			"0x1b",
			"scancode",
			"pressed",
			"presses",
			"27",
			"bazz",
			"28",
			"save16b2",
			"notesc",
			"eax,pressed",
			"testpressed8b",
			"saveselect",
			"Get_Key",
			"key",
			"showvideo",
			"testpressed8b",
			"stringa",
			"Please Select",
			"bazz",
			"Main_Proc",
			"key",
			"NEWSYM Get_Key",
			"NEW_SYM Get_Key",
			"guipresstestb",
			"Get_Key",
			"GUIlastkey",
			"GUIfirstkey",
			"pl1upk",
			"GUIqcheckkeys2",
			"pl1upk",
			"ScanCodeListing",
			"27",
			"guicpressptr",
			"outofmemory",
			"Code Alignment",
			"SDLK",
			"dl",
			"GUIKEYS",
			"keyboard",
			"DGOptnsDrawBox2",
			"GUIInputDispKey",
			"pl5selk",
			"Check_Key",
			"guipresstestb",
			"guipresstext4b"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"ddprintf",
			"_DSPMem",
			"_BSEnable",
			"logtime_str",
			"<a href=$1 target=\"_blank\">$0</a>",
			"<a href=$1>$0</a>",
			"\"//'",
			"ed\\ ",
			"C\\ ",
			"\\C ",
			"\\ G",
			"\\\"//\"",
			"r\\\"",
			"\\\"-",
			"\"$1\"",
			"\"$0\"",
			"prepend '$0'",
			"'$0'",
			"IPFILE",
			"ReliablePacket",
			"MainSock",
			"UmbrellaSerial.h",
			"name.c_str()",
			"on_deadline",
			"ResettableTimer",
			"cerr",
			"time_base",
			"get_ts",
			"boost::bind",
			"XMLstr",
			"recv_rtthdr",
			"send_rtthdr",
			"-",
			"s_doc",
			"user",
			"./pjsua-x86_64-apple-darwin13.3.0 --stun-srv=stun.ekiga.net --id=sip:bazz@redwolf.stark-network.fr --registrar=sip:redwolf.stark-network.fr:25521 --realm=redwolf.stark-network.fr --username=bazz --password=bazz",
			"user",
			"./pjsua-x86_64-apple-darwin13.3.0 --stun-srv=stun.ekiga.net --id=sip:bazz@redwolf.stark-network.fr --registrar=sip:redwolf.stark-network.fr:25521 --realm=redwolf.stark-network.fr --username=bazz --password=bazz",
			"C3",
			"## Controller/Server sends drive commands ##\nBackwardsTextArrow(S3.s, C1.n, 'd')\n	## illustrate constant sending of msgs ##\n			y=-.05\n			BackwardsTextArrow(S3.s + (0,y), C1.n + (0, y-.03), )\n			y = y - .05\n			BackwardsTextArrow(S3.s + (0,y), C1.n + (-0, y-.03))\n	##",
			"S3",
			"## Controller/Server sends drive commands ##\nBackwardsTextArrow(S3.s, C1.n, 'd')\n	## illustrate constant sending of msgs ##\n			y=-.05\n			BackwardsTextArrow(S1.s + (0,y), C1.n + (0, y-.03), )\n			y = y - .05\n			BackwardsTextArrow(S1.s + (0,y), C1.n + (-0, y-.03))",
			"UmbrellaSerial",
			"cSerialUmbrella",
			"cCarduino",
			"null_terminate()",
			"xml_packet_template",
			"size_t",
			"uint16_t",
			"buflen[src].data.get()",
			"buflen.data.get()",
			"HandshakePacket",
			"handshake_packet",
			"options",
			"udp",
			"ip",
			"SOLID",
			"HALFMASSIVE",
			"PASSIVE",
			"NOCOLLISION",
			"UNTOUCHABLE",
			"TRANSPARENT",
			"SOLID",
			"wget http://www.smrpglegacy.com/$0",
			"http://www.smrpglegacy.com/$0",
			"http://www.smrpglegacy.com/$1",
			"currentUsedCarNum"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Summary Notes.txt",
					"settings":
					{
						"buffer_size": 1006,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "create_spc.sh",
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "PC-side/player/Music_Player.h",
					"settings":
					{
						"buffer_size": 1637,
						"regions":
						{
						},
						"selection":
						[
							[
								485,
								485
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "PC-side/player/Music_Player.cpp",
					"settings":
					{
						"buffer_size": 5246,
						"regions":
						{
						},
						"selection":
						[
							[
								3902,
								3911
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2693.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"settings":
					{
						"buffer_size": 123198,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										216,
										220
									],
									[
										483,
										487
									],
									[
										848,
										852
									],
									[
										1169,
										1173
									],
									[
										1302,
										1306
									],
									[
										1562,
										1566
									],
									[
										1884,
										1888
									],
									[
										2052,
										2056
									],
									[
										2100,
										2104
									],
									[
										2116,
										2120
									],
									[
										2276,
										2280
									],
									[
										2445,
										2449
									],
									[
										2590,
										2594
									],
									[
										2618,
										2622
									],
									[
										2814,
										2818
									],
									[
										3089,
										3093
									],
									[
										3260,
										3264
									],
									[
										3454,
										3458
									],
									[
										3632,
										3636
									],
									[
										3747,
										3751
									],
									[
										3939,
										3943
									],
									[
										4131,
										4135
									],
									[
										4390,
										4394
									],
									[
										4684,
										4688
									],
									[
										4869,
										4873
									],
									[
										5116,
										5120
									],
									[
										5344,
										5348
									],
									[
										5539,
										5543
									],
									[
										5727,
										5731
									],
									[
										5994,
										5998
									],
									[
										6150,
										6154
									],
									[
										6187,
										6191
									],
									[
										6436,
										6440
									],
									[
										6660,
										6664
									],
									[
										6815,
										6819
									],
									[
										6966,
										6970
									],
									[
										7294,
										7298
									],
									[
										7315,
										7319
									],
									[
										7416,
										7420
									],
									[
										7656,
										7660
									],
									[
										7857,
										7861
									],
									[
										8023,
										8027
									],
									[
										8176,
										8180
									],
									[
										8206,
										8210
									],
									[
										8333,
										8337
									],
									[
										8345,
										8349
									],
									[
										8455,
										8459
									],
									[
										8586,
										8590
									],
									[
										8718,
										8722
									],
									[
										8844,
										8848
									],
									[
										8881,
										8885
									],
									[
										9076,
										9080
									],
									[
										9271,
										9275
									],
									[
										9479,
										9483
									],
									[
										9618,
										9622
									],
									[
										9665,
										9669
									],
									[
										9832,
										9836
									],
									[
										10014,
										10018
									],
									[
										10229,
										10233
									],
									[
										10279,
										10283
									],
									[
										10343,
										10347
									],
									[
										10391,
										10395
									],
									[
										10556,
										10560
									],
									[
										10689,
										10693
									],
									[
										10818,
										10822
									],
									[
										10974,
										10978
									],
									[
										10992,
										10996
									],
									[
										11195,
										11199
									],
									[
										11343,
										11347
									],
									[
										11636,
										11640
									],
									[
										11794,
										11798
									],
									[
										11922,
										11926
									],
									[
										12075,
										12079
									],
									[
										12227,
										12231
									],
									[
										12365,
										12369
									],
									[
										12510,
										12514
									],
									[
										12657,
										12661
									],
									[
										12826,
										12830
									],
									[
										12994,
										12998
									],
									[
										13307,
										13311
									],
									[
										13505,
										13509
									],
									[
										13618,
										13622
									],
									[
										13839,
										13843
									],
									[
										13926,
										13930
									],
									[
										14287,
										14291
									],
									[
										14481,
										14485
									],
									[
										14596,
										14600
									],
									[
										14718,
										14722
									],
									[
										14950,
										14954
									],
									[
										15009,
										15013
									],
									[
										15286,
										15290
									],
									[
										15340,
										15344
									],
									[
										15350,
										15354
									],
									[
										15367,
										15371
									],
									[
										15505,
										15509
									],
									[
										15633,
										15637
									],
									[
										15693,
										15697
									],
									[
										15874,
										15878
									],
									[
										16021,
										16025
									],
									[
										16361,
										16365
									],
									[
										16637,
										16641
									],
									[
										16663,
										16667
									],
									[
										16806,
										16810
									],
									[
										17026,
										17030
									],
									[
										17142,
										17146
									],
									[
										17183,
										17187
									],
									[
										17323,
										17327
									],
									[
										17519,
										17523
									],
									[
										17665,
										17669
									],
									[
										17716,
										17720
									],
									[
										17852,
										17856
									],
									[
										17920,
										17924
									],
									[
										17986,
										17990
									],
									[
										18058,
										18062
									],
									[
										18127,
										18131
									],
									[
										18206,
										18210
									],
									[
										18369,
										18373
									],
									[
										18455,
										18459
									],
									[
										18541,
										18545
									],
									[
										18613,
										18617
									],
									[
										18716,
										18720
									],
									[
										18838,
										18842
									],
									[
										18944,
										18948
									],
									[
										19022,
										19026
									],
									[
										19155,
										19159
									],
									[
										19259,
										19263
									],
									[
										19462,
										19466
									],
									[
										19538,
										19542
									],
									[
										19609,
										19613
									],
									[
										19685,
										19689
									],
									[
										19774,
										19778
									],
									[
										19858,
										19862
									],
									[
										19991,
										19995
									],
									[
										20198,
										20202
									],
									[
										20307,
										20311
									],
									[
										20500,
										20504
									],
									[
										20726,
										20730
									],
									[
										20770,
										20774
									],
									[
										20839,
										20843
									],
									[
										21003,
										21007
									],
									[
										21062,
										21066
									],
									[
										21375,
										21385
									],
									[
										21592,
										21602
									],
									[
										21780,
										21790
									],
									[
										22117,
										22127
									],
									[
										22143,
										22153
									],
									[
										22222,
										22232
									],
									[
										22281,
										22291
									],
									[
										22309,
										22319
									],
									[
										22452,
										22462
									],
									[
										22463,
										22473
									],
									[
										22716,
										22726
									],
									[
										22950,
										22960
									],
									[
										23171,
										23181
									],
									[
										23441,
										23451
									],
									[
										23539,
										23549
									],
									[
										23772,
										23782
									],
									[
										24078,
										24088
									],
									[
										24174,
										24184
									],
									[
										24286,
										24296
									],
									[
										24545,
										24555
									],
									[
										24801,
										24811
									],
									[
										24922,
										24932
									],
									[
										25086,
										25096
									],
									[
										25321,
										25331
									],
									[
										25361,
										25371
									],
									[
										25548,
										25558
									],
									[
										25676,
										25686
									],
									[
										25967,
										25977
									],
									[
										26022,
										26032
									],
									[
										26220,
										26230
									],
									[
										26354,
										26364
									],
									[
										26403,
										26413
									],
									[
										26636,
										26646
									],
									[
										26782,
										26792
									],
									[
										26853,
										26863
									],
									[
										27065,
										27075
									],
									[
										27231,
										27241
									],
									[
										27480,
										27490
									],
									[
										27560,
										27570
									],
									[
										27727,
										27737
									],
									[
										28103,
										28113
									],
									[
										28199,
										28209
									],
									[
										28371,
										28381
									],
									[
										28622,
										28632
									],
									[
										28817,
										28827
									],
									[
										28871,
										28881
									],
									[
										29011,
										29021
									],
									[
										29169,
										29179
									],
									[
										29450,
										29460
									],
									[
										29659,
										29669
									],
									[
										29990,
										30000
									],
									[
										30038,
										30048
									],
									[
										30176,
										30186
									],
									[
										30257,
										30267
									],
									[
										30438,
										30448
									],
									[
										30621,
										30631
									],
									[
										30764,
										30774
									],
									[
										30995,
										31005
									],
									[
										31116,
										31126
									],
									[
										31280,
										31290
									],
									[
										31529,
										31539
									],
									[
										31650,
										31660
									],
									[
										31710,
										31720
									],
									[
										31871,
										31881
									],
									[
										32071,
										32081
									],
									[
										32310,
										32320
									],
									[
										32438,
										32448
									],
									[
										32658,
										32668
									],
									[
										32829,
										32839
									],
									[
										32997,
										33007
									],
									[
										33054,
										33064
									],
									[
										33210,
										33220
									],
									[
										33363,
										33373
									],
									[
										33413,
										33423
									],
									[
										33546,
										33556
									],
									[
										33766,
										33776
									],
									[
										33995,
										34005
									],
									[
										34126,
										34136
									],
									[
										34416,
										34426
									],
									[
										34604,
										34614
									],
									[
										34773,
										34783
									],
									[
										35037,
										35047
									],
									[
										35320,
										35330
									],
									[
										35385,
										35395
									],
									[
										35576,
										35586
									],
									[
										35626,
										35636
									],
									[
										35697,
										35707
									],
									[
										35853,
										35863
									],
									[
										36093,
										36103
									],
									[
										36176,
										36186
									],
									[
										36321,
										36331
									],
									[
										36474,
										36484
									],
									[
										36705,
										36715
									],
									[
										36765,
										36775
									],
									[
										36959,
										36969
									],
									[
										37006,
										37016
									],
									[
										37162,
										37172
									],
									[
										37211,
										37221
									],
									[
										37373,
										37383
									],
									[
										37589,
										37599
									],
									[
										37749,
										37759
									],
									[
										37984,
										37994
									],
									[
										38150,
										38160
									],
									[
										38377,
										38387
									],
									[
										38639,
										38649
									],
									[
										38841,
										38851
									],
									[
										39214,
										39232
									],
									[
										39655,
										39671
									],
									[
										39763,
										39779
									],
									[
										39899,
										39915
									],
									[
										40157,
										40173
									],
									[
										40432,
										40444
									],
									[
										40606,
										40618
									],
									[
										40822,
										40834
									],
									[
										41062,
										41074
									],
									[
										41364,
										41376
									],
									[
										41432,
										41444
									],
									[
										41765,
										41777
									],
									[
										42011,
										42023
									],
									[
										42077,
										42089
									],
									[
										42366,
										42378
									],
									[
										42622,
										42634
									],
									[
										42690,
										42702
									],
									[
										42971,
										42983
									],
									[
										43220,
										43232
									],
									[
										43286,
										43298
									],
									[
										43576,
										43588
									],
									[
										43812,
										43824
									],
									[
										43880,
										43892
									],
									[
										44203,
										44215
									],
									[
										44441,
										44453
									],
									[
										44509,
										44521
									],
									[
										44792,
										44804
									],
									[
										45087,
										45099
									],
									[
										45353,
										45365
									],
									[
										45763,
										45775
									],
									[
										46060,
										46072
									],
									[
										46397,
										46409
									],
									[
										46642,
										46654
									],
									[
										46710,
										46722
									],
									[
										47003,
										47015
									],
									[
										47243,
										47255
									],
									[
										47302,
										47314
									],
									[
										47576,
										47588
									],
									[
										47780,
										47792
									],
									[
										47848,
										47860
									],
									[
										48143,
										48155
									],
									[
										48440,
										48452
									],
									[
										48506,
										48518
									],
									[
										48834,
										48846
									],
									[
										49077,
										49089
									],
									[
										49145,
										49157
									],
									[
										49472,
										49484
									],
									[
										49795,
										49803
									],
									[
										50107,
										50115
									],
									[
										50436,
										50444
									],
									[
										50731,
										50740
									],
									[
										50878,
										50887
									],
									[
										51104,
										51113
									],
									[
										51168,
										51177
									],
									[
										51187,
										51196
									],
									[
										51235,
										51244
									],
									[
										51254,
										51263
									],
									[
										51467,
										51476
									],
									[
										51772,
										51781
									],
									[
										52010,
										52019
									],
									[
										52225,
										52234
									],
									[
										52495,
										52504
									],
									[
										52667,
										52676
									],
									[
										52946,
										52955
									],
									[
										53226,
										53235
									],
									[
										53520,
										53529
									],
									[
										53809,
										53818
									],
									[
										53968,
										53977
									],
									[
										54159,
										54168
									],
									[
										54217,
										54226
									],
									[
										54471,
										54480
									],
									[
										54737,
										54746
									],
									[
										54941,
										54950
									],
									[
										55182,
										55191
									],
									[
										55429,
										55438
									],
									[
										55759,
										55768
									],
									[
										56054,
										56062
									],
									[
										56217,
										56225
									],
									[
										56380,
										56388
									],
									[
										56525,
										56533
									],
									[
										56883,
										56891
									],
									[
										57097,
										57105
									],
									[
										57227,
										57235
									],
									[
										57382,
										57390
									],
									[
										57430,
										57438
									],
									[
										57814,
										57822
									],
									[
										58019,
										58027
									],
									[
										58280,
										58286
									],
									[
										58338,
										58344
									],
									[
										58575,
										58581
									],
									[
										58738,
										58744
									],
									[
										58883,
										58889
									],
									[
										59116,
										59122
									],
									[
										59226,
										59232
									],
									[
										59399,
										59405
									],
									[
										59788,
										59794
									],
									[
										59846,
										59852
									],
									[
										60083,
										60089
									],
									[
										60341,
										60347
									],
									[
										60382,
										60388
									],
									[
										60456,
										60462
									],
									[
										60693,
										60699
									],
									[
										60876,
										60882
									],
									[
										60966,
										60972
									],
									[
										61063,
										61069
									],
									[
										61276,
										61282
									],
									[
										61482,
										61488
									],
									[
										61523,
										61529
									],
									[
										61626,
										61632
									],
									[
										61863,
										61869
									],
									[
										62080,
										62086
									],
									[
										62200,
										62206
									],
									[
										62256,
										62262
									],
									[
										62309,
										62315
									],
									[
										62479,
										62485
									],
									[
										62648,
										62654
									],
									[
										62901,
										62916
									],
									[
										63059,
										63074
									],
									[
										63247,
										63262
									],
									[
										63524,
										63539
									],
									[
										63584,
										63599
									],
									[
										63648,
										63663
									],
									[
										63717,
										63732
									],
									[
										63759,
										63774
									],
									[
										63968,
										63983
									],
									[
										64264,
										64279
									],
									[
										64444,
										64459
									],
									[
										64475,
										64490
									],
									[
										64492,
										64507
									],
									[
										64542,
										64557
									],
									[
										64560,
										64575
									],
									[
										64619,
										64634
									],
									[
										64742,
										64757
									],
									[
										64843,
										64858
									],
									[
										64984,
										64999
									],
									[
										65128,
										65143
									],
									[
										65221,
										65236
									],
									[
										65349,
										65364
									],
									[
										65536,
										65551
									],
									[
										65675,
										65690
									],
									[
										65703,
										65718
									],
									[
										65969,
										65984
									],
									[
										66302,
										66307
									],
									[
										66532,
										66537
									],
									[
										66764,
										66769
									],
									[
										67136,
										67141
									],
									[
										67469,
										67474
									],
									[
										67829,
										67834
									],
									[
										68077,
										68082
									],
									[
										68325,
										68330
									],
									[
										68606,
										68611
									],
									[
										68747,
										68752
									],
									[
										68988,
										68993
									],
									[
										69266,
										69271
									],
									[
										69555,
										69560
									],
									[
										69714,
										69719
									],
									[
										69957,
										69962
									],
									[
										70185,
										70190
									],
									[
										70422,
										70427
									],
									[
										70591,
										70596
									],
									[
										70894,
										70899
									],
									[
										71166,
										71171
									],
									[
										71438,
										71443
									],
									[
										71712,
										71717
									],
									[
										71955,
										71960
									],
									[
										72114,
										72119
									],
									[
										72295,
										72300
									],
									[
										72325,
										72330
									],
									[
										72360,
										72365
									],
									[
										72443,
										72448
									],
									[
										72600,
										72605
									],
									[
										72630,
										72635
									],
									[
										72667,
										72672
									],
									[
										72700,
										72705
									],
									[
										72930,
										72935
									],
									[
										73141,
										73146
									],
									[
										73316,
										73321
									],
									[
										73578,
										73583
									],
									[
										73680,
										73685
									],
									[
										73738,
										73743
									],
									[
										73788,
										73793
									],
									[
										73939,
										73944
									],
									[
										74243,
										74248
									],
									[
										74459,
										74464
									],
									[
										74616,
										74621
									],
									[
										74946,
										74951
									],
									[
										75132,
										75137
									],
									[
										75336,
										75341
									],
									[
										75435,
										75440
									],
									[
										75450,
										75455
									],
									[
										75534,
										75539
									],
									[
										75594,
										75599
									],
									[
										75768,
										75773
									],
									[
										75923,
										75928
									],
									[
										76081,
										76086
									],
									[
										76198,
										76203
									],
									[
										76291,
										76296
									],
									[
										76408,
										76413
									],
									[
										76470,
										76475
									],
									[
										76622,
										76627
									],
									[
										76684,
										76689
									],
									[
										76939,
										76944
									],
									[
										77209,
										77214
									],
									[
										77357,
										77362
									],
									[
										77408,
										77413
									],
									[
										77677,
										77682
									],
									[
										77902,
										77907
									],
									[
										77953,
										77958
									],
									[
										77994,
										77999
									],
									[
										78201,
										78206
									],
									[
										78386,
										78391
									],
									[
										78641,
										78646
									],
									[
										78768,
										78773
									],
									[
										79093,
										79098
									],
									[
										79285,
										79290
									],
									[
										79605,
										79610
									],
									[
										79777,
										79782
									],
									[
										80063,
										80068
									],
									[
										80345,
										80350
									],
									[
										80585,
										80590
									],
									[
										80743,
										80748
									],
									[
										80897,
										80902
									],
									[
										80927,
										80932
									],
									[
										80958,
										80963
									],
									[
										80988,
										80993
									],
									[
										81014,
										81019
									],
									[
										81036,
										81041
									],
									[
										81074,
										81079
									],
									[
										81091,
										81096
									],
									[
										81119,
										81124
									],
									[
										81146,
										81151
									],
									[
										81164,
										81169
									],
									[
										81245,
										81250
									],
									[
										81292,
										81297
									],
									[
										81337,
										81342
									],
									[
										81519,
										81524
									],
									[
										81726,
										81731
									],
									[
										81746,
										81751
									],
									[
										82033,
										82038
									],
									[
										82062,
										82067
									],
									[
										82248,
										82253
									],
									[
										82575,
										82580
									],
									[
										82733,
										82738
									],
									[
										82771,
										82776
									],
									[
										82847,
										82852
									],
									[
										82885,
										82890
									],
									[
										82950,
										82955
									],
									[
										83007,
										83012
									],
									[
										83056,
										83061
									],
									[
										83186,
										83191
									],
									[
										83348,
										83353
									],
									[
										83628,
										83633
									],
									[
										83676,
										83681
									],
									[
										84051,
										84056
									],
									[
										84225,
										84230
									],
									[
										84439,
										84444
									],
									[
										84718,
										84723
									],
									[
										84865,
										84870
									],
									[
										85125,
										85130
									],
									[
										85316,
										85321
									],
									[
										85437,
										85442
									],
									[
										85567,
										85572
									],
									[
										85762,
										85767
									],
									[
										85987,
										85992
									],
									[
										86243,
										86248
									],
									[
										86516,
										86521
									],
									[
										86668,
										86673
									],
									[
										86824,
										86829
									],
									[
										86854,
										86859
									],
									[
										86983,
										86988
									],
									[
										86995,
										87000
									],
									[
										87129,
										87134
									],
									[
										87271,
										87276
									],
									[
										87407,
										87412
									],
									[
										87648,
										87653
									],
									[
										87859,
										87864
									],
									[
										88034,
										88039
									],
									[
										88284,
										88289
									],
									[
										88492,
										88497
									],
									[
										88509,
										88514
									],
									[
										88646,
										88651
									],
									[
										88878,
										88883
									],
									[
										88960,
										88965
									],
									[
										89270,
										89275
									],
									[
										89453,
										89458
									],
									[
										89747,
										89752
									],
									[
										89915,
										89920
									],
									[
										90180,
										90185
									],
									[
										90438,
										90443
									],
									[
										90596,
										90601
									],
									[
										90803,
										90808
									],
									[
										91143,
										91148
									],
									[
										91405,
										91410
									],
									[
										91675,
										91680
									],
									[
										91801,
										91806
									],
									[
										92029,
										92034
									],
									[
										92321,
										92326
									],
									[
										92517,
										92522
									],
									[
										92825,
										92830
									],
									[
										92951,
										92956
									],
									[
										93287,
										93292
									],
									[
										93524,
										93529
									],
									[
										93798,
										93803
									],
									[
										93951,
										93956
									],
									[
										94215,
										94220
									],
									[
										94545,
										94550
									],
									[
										94864,
										94869
									],
									[
										95094,
										95099
									],
									[
										95326,
										95331
									],
									[
										95698,
										95703
									],
									[
										96031,
										96036
									],
									[
										96391,
										96396
									],
									[
										96639,
										96644
									],
									[
										96887,
										96892
									],
									[
										97168,
										97173
									],
									[
										97309,
										97314
									],
									[
										97550,
										97555
									],
									[
										97828,
										97833
									],
									[
										98117,
										98122
									],
									[
										98276,
										98281
									],
									[
										98519,
										98524
									],
									[
										98747,
										98752
									],
									[
										98984,
										98989
									],
									[
										99153,
										99158
									],
									[
										99456,
										99461
									],
									[
										99728,
										99733
									],
									[
										100000,
										100005
									],
									[
										100274,
										100279
									],
									[
										100517,
										100522
									],
									[
										100676,
										100681
									],
									[
										100857,
										100862
									],
									[
										100887,
										100892
									],
									[
										100922,
										100927
									],
									[
										101005,
										101010
									],
									[
										101162,
										101167
									],
									[
										101192,
										101197
									],
									[
										101229,
										101234
									],
									[
										101262,
										101267
									],
									[
										101492,
										101497
									],
									[
										101703,
										101708
									],
									[
										101878,
										101883
									],
									[
										102140,
										102145
									],
									[
										102242,
										102247
									],
									[
										102300,
										102305
									],
									[
										102350,
										102355
									],
									[
										102501,
										102506
									],
									[
										102805,
										102810
									],
									[
										103021,
										103026
									],
									[
										103178,
										103183
									],
									[
										103508,
										103513
									],
									[
										103694,
										103699
									],
									[
										103898,
										103903
									],
									[
										103997,
										104002
									],
									[
										104012,
										104017
									],
									[
										104096,
										104101
									],
									[
										104156,
										104161
									],
									[
										104330,
										104335
									],
									[
										104485,
										104490
									],
									[
										104643,
										104648
									],
									[
										104760,
										104765
									],
									[
										104853,
										104858
									],
									[
										104970,
										104975
									],
									[
										105032,
										105037
									],
									[
										105184,
										105189
									],
									[
										105246,
										105251
									],
									[
										105501,
										105506
									],
									[
										105771,
										105776
									],
									[
										105919,
										105924
									],
									[
										105970,
										105975
									],
									[
										106239,
										106244
									],
									[
										106464,
										106469
									],
									[
										106515,
										106520
									],
									[
										106556,
										106561
									],
									[
										106763,
										106768
									],
									[
										106948,
										106953
									],
									[
										107203,
										107208
									],
									[
										107330,
										107335
									],
									[
										107655,
										107660
									],
									[
										107847,
										107852
									],
									[
										108167,
										108172
									],
									[
										108339,
										108344
									],
									[
										108625,
										108630
									],
									[
										108907,
										108912
									],
									[
										109147,
										109152
									],
									[
										109305,
										109310
									],
									[
										109459,
										109464
									],
									[
										109489,
										109494
									],
									[
										109520,
										109525
									],
									[
										109550,
										109555
									],
									[
										109576,
										109581
									],
									[
										109598,
										109603
									],
									[
										109636,
										109641
									],
									[
										109653,
										109658
									],
									[
										109681,
										109686
									],
									[
										109708,
										109713
									],
									[
										109726,
										109731
									],
									[
										109807,
										109812
									],
									[
										109854,
										109859
									],
									[
										109899,
										109904
									],
									[
										110081,
										110086
									],
									[
										110288,
										110293
									],
									[
										110308,
										110313
									],
									[
										110595,
										110600
									],
									[
										110624,
										110629
									],
									[
										110810,
										110815
									],
									[
										111137,
										111142
									],
									[
										111295,
										111300
									],
									[
										111333,
										111338
									],
									[
										111409,
										111414
									],
									[
										111447,
										111452
									],
									[
										111512,
										111517
									],
									[
										111569,
										111574
									],
									[
										111618,
										111623
									],
									[
										111748,
										111753
									],
									[
										111910,
										111915
									],
									[
										112190,
										112195
									],
									[
										112238,
										112243
									],
									[
										112613,
										112618
									],
									[
										112787,
										112792
									],
									[
										113001,
										113006
									],
									[
										113280,
										113285
									],
									[
										113427,
										113432
									],
									[
										113687,
										113692
									],
									[
										113878,
										113883
									],
									[
										113999,
										114004
									],
									[
										114129,
										114134
									],
									[
										114324,
										114329
									],
									[
										114549,
										114554
									],
									[
										114805,
										114810
									],
									[
										115078,
										115083
									],
									[
										115230,
										115235
									],
									[
										115386,
										115391
									],
									[
										115416,
										115421
									],
									[
										115545,
										115550
									],
									[
										115557,
										115562
									],
									[
										115691,
										115696
									],
									[
										115833,
										115838
									],
									[
										115969,
										115974
									],
									[
										116210,
										116215
									],
									[
										116421,
										116426
									],
									[
										116596,
										116601
									],
									[
										116846,
										116851
									],
									[
										117054,
										117059
									],
									[
										117071,
										117076
									],
									[
										117208,
										117213
									],
									[
										117440,
										117445
									],
									[
										117522,
										117527
									],
									[
										117832,
										117837
									],
									[
										118015,
										118020
									],
									[
										118309,
										118314
									],
									[
										118477,
										118482
									],
									[
										118742,
										118747
									],
									[
										119000,
										119005
									],
									[
										119158,
										119163
									],
									[
										119365,
										119370
									],
									[
										119705,
										119710
									],
									[
										119967,
										119972
									],
									[
										120237,
										120242
									],
									[
										120363,
										120368
									],
									[
										120591,
										120596
									],
									[
										120883,
										120888
									],
									[
										121079,
										121084
									],
									[
										121387,
										121392
									],
									[
										121513,
										121518
									],
									[
										121849,
										121854
									],
									[
										122086,
										122091
									],
									[
										122360,
										122365
									],
									[
										122513,
										122518
									],
									[
										122777,
										122782
									],
									[
										123107,
										123112
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								96230,
								96230
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 15,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 47507.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "PC-side/gme.txt",
					"settings":
					{
						"buffer_size": 18453,
						"regions":
						{
						},
						"selection":
						[
							[
								10237,
								10248
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4889.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "PC-side/gme/Data_Reader.h",
					"settings":
					{
						"buffer_size": 3445,
						"regions":
						{
						},
						"selection":
						[
							[
								1615,
								1620
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 544.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "PC-side/gme/Data_Reader.cpp",
					"settings":
					{
						"buffer_size": 6439,
						"regions":
						{
						},
						"selection":
						[
							[
								3964,
								3964
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2948.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "PC-side/gme/Gme_File.h",
					"settings":
					{
						"buffer_size": 4584,
						"regions":
						{
						},
						"selection":
						[
							[
								584,
								589
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 42.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "PC-side/gme/Gme_File.cpp",
					"settings":
					{
						"buffer_size": 5261,
						"regions":
						{
						},
						"selection":
						[
							[
								2684,
								2689
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1402.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "PC-side/gme/Snes_Spc.h",
					"settings":
					{
						"buffer_size": 3180,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 87.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "PC-side/gme/Snes_Spc.cpp",
					"settings":
					{
						"buffer_size": 12050,
						"regions":
						{
						},
						"selection":
						[
							[
								1721,
								1721
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 517.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "PC-side/gme/Spc_Emu.h",
					"settings":
					{
						"buffer_size": 1959,
						"regions":
						{
						},
						"selection":
						[
							[
								1607,
								1607
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 576.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "PC-side/gme/Spc_Emu.cpp",
					"settings":
					{
						"buffer_size": 8229,
						"regions":
						{
						},
						"selection":
						[
							[
								7279,
								7288
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4383.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "PC-side/gme/blargg_source.h",
					"settings":
					{
						"buffer_size": 2434,
						"regions":
						{
						},
						"selection":
						[
							[
								1340,
								1340
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 39.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "PC-side/gme/gme.h",
					"settings":
					{
						"buffer_size": 7865,
						"regions":
						{
						},
						"selection":
						[
							[
								6580,
								6591
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2707.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "PC-side/gme/gme.cpp",
					"settings":
					{
						"buffer_size": 7676,
						"regions":
						{
						},
						"selection":
						[
							[
								3639,
								3652
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2140.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "PC-side/gme/Music_Emu.h",
					"settings":
					{
						"buffer_size": 7179,
						"regions":
						{
						},
						"selection":
						[
							[
								184,
								192
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1194.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "PC-side/player/player.cpp",
					"settings":
					{
						"buffer_size": 4597,
						"regions":
						{
						},
						"selection":
						[
							[
								1448,
								1454
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 789.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "PC-side/player/Audio_Scope.h",
					"settings":
					{
						"buffer_size": 778,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "PC-side/player/Audio_Scope.cpp",
					"settings":
					{
						"buffer_size": 4826,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2668.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 340.0,
	"status_bar_visible": true
}
